import requests
from bs4 import BeautifulSoup
import os
import json
import urllib3
import re
import urllib.parse
import hashlib
import time
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CloudDownloader –¥–ª—è –∞–≤—Ç–æ—Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±–ª–∞—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
try:
    from cloud_downloader import CloudDownloader
    CLOUD_AUTO_ENABLED = True
    print("‚úÖ CloudDownloader –∑–∞–≥—Ä—É–∂–µ–Ω - –∞–≤—Ç–æ—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–ª–∞—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤–∫–ª—é—á–µ–Ω–æ")
except ImportError:
    CloudDownloader = None
    CLOUD_AUTO_ENABLED = False
    print("‚ö†Ô∏è cloud_downloader.py –Ω–µ –Ω–∞–π–¥–µ–Ω - –∞–≤—Ç–æ—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–ª–∞—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ")

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π User-Agent –≤–º–µ—Å—Ç–æ fake-useragent
STATIC_USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"

HEADERS = {
    "User-Agent": STATIC_USER_AGENT,
    "Referer": "https://kemono.cr/", 
    "Accept": "text/css",  # –ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫!
    "Accept-Language": "en-US,en;q=0.9", 
    "Accept-Encoding": "gzip, deflate",  
    "Connection": "keep-alive"
}

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
SUPPORTED_EXTENSIONS = {
    # 3D –º–æ–¥–µ–ª–∏ –∏ —Ñ–∞–π–ª—ã Blender
    '.glb', '.gltf', '.blend', '.fbx', '.obj', '.dae', '.3ds', '.max', '.ma', '.mb',
    # –í–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç—ã
    '.mp4', '.avi', '.mkv', '.mov', '.webm', '.flv', '.wmv', '.m4v', '.mpg', '.mpeg',
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    '.png', '.jpg', '.jpeg', '.gif', '.bmp', '.tiff', '.tga', '.psd', '.webp', '.svg',
    # –ê—Ä—Ö–∏–≤—ã
    '.zip', '.rar', '.7z', '.tar', '.gz', '.bz2', '.xz',
    # –î–æ–∫—É–º–µ–Ω—Ç—ã
    '.pdf', '.doc', '.docx', '.txt', '.rtf',
    # –ê—É–¥–∏–æ
    '.mp3', '.wav', '.flac', '.ogg', '.m4a', '.aac',
    # –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
    '.exe', '.msi', '.dmg', '.apk', '.ipa',
    # Unity –∏ –∏–≥—Ä–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    '.unity', '.unitypackage', '.prefab', '.asset',
    # –¢–µ–∫—Å—Ç—É—Ä—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    '.dds', '.hdr', '.exr', '.mat'
}

def is_supported_file(filename):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
    if not filename:
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    ext = os.path.splitext(filename.lower())[1]
    return ext in SUPPORTED_EXTENSIONS or len(filename) > 3  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –∏–º–µ–Ω–µ–º

def detect_cloud_links(content):
    """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ"""
    cloud_links = []
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    cloud_patterns = {
        'Google Drive': [
            r'https://drive\.google\.com/[^\s<>"]+',
            r'https://docs\.google\.com/[^\s<>"]+',
        ],
        'MEGA': [
            r'https://mega\.nz/[^\s<>"]+',
            r'https://mega\.co\.nz/[^\s<>"]+',
        ],
        'Dropbox': [
            r'https://(?:www\.)?dropbox\.com/[^\s<>"]+',
            r'https://dl\.dropboxusercontent\.com/[^\s<>"]+',
        ],
        'OneDrive': [
            r'https://onedrive\.live\.com/[^\s<>"]+',
            r'https://1drv\.ms/[^\s<>"]+',
        ],
        'MediaFire': [
            r'https://(?:www\.)?mediafire\.com/[^\s<>"]+',
        ],
        'WeTransfer': [
            r'https://(?:we\.tl|wetransfer\.com)/[^\s<>"]+',
        ],
        'pCloud': [
            r'https://(?:my\.)?pcloud\.com/[^\s<>"]+',
        ],
        'Yandex Disk': [
            r'https://disk\.yandex\.[^\s<>"/]+/[^\s<>"]+',
        ],
        'Box': [
            r'https://(?:app\.)?box\.com/[^\s<>"]+',
        ],
        'iCloud': [
            r'https://(?:www\.)?icloud\.com/[^\s<>"]+',
        ]
    }
    
    for service_name, patterns in cloud_patterns.items():
        for pattern in patterns:
            matches = re.findall(pattern, content, re.IGNORECASE)
            for match in matches:
                # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                clean_link = match.rstrip('.,;:)"}')
                if clean_link not in [link['url'] for link in cloud_links]:
                    cloud_links.append({
                        'service': service_name,
                        'url': clean_link
                    })
    
    return cloud_links

def save_cloud_links(save_dir, cloud_links, post_url):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±–ª–∞—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ —Ñ–∞–π–ª"""
    if not cloud_links:
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(save_dir, exist_ok=True)
    cloud_file = os.path.join(save_dir, 'cloud_links.txt')
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å
        existing_links = set()
        if os.path.exists(cloud_file):
            with open(cloud_file, 'r', encoding='utf-8') as f:
                for line in f:
                    if line.strip().startswith('http') or '] http' in line:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "[Service] URL"
                        if '] ' in line:
                            url_part = line.split('] ', 1)[-1].strip()
                            existing_links.add(url_part)
                        elif line.strip().startswith('http'):
                            existing_links.add(line.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
        new_links = []
        for link_info in cloud_links:
            if link_info['url'] not in existing_links:
                new_links.append(link_info)
        
        if not new_links:
            print(f"    ‚ÑπÔ∏è –í—Å–µ –æ–±–ª–∞—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏
        with open(cloud_file, 'a', encoding='utf-8') as f:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
            f.write(f"\n=== {post_url} ===\n")
            f.write(f"–ù–∞–π–¥–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            for link_info in new_links:
                f.write(f"[{link_info['service']}] {link_info['url']}\n")
                existing_links.add(link_info['url'])
            
            f.write("\n")
        
        print(f"    üíæ –û–±–ª–∞—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(new_links)} –≤ cloud_links.txt")
        
    except Exception as e:
        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–ª–∞—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {e}")

def download_cloud_files(save_dir, cloud_links, post_url):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –æ–±–ª–∞—á–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
    """
    if not cloud_links or not CLOUD_AUTO_ENABLED:
        return []
    
    print(f"\nüåê –ê–≤—Ç–æ—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–ª–∞—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(cloud_links)}")
    
    downloader = CloudDownloader()
    downloaded_files = []
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ–±–ª–∞—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã)
    cloud_dir = save_dir
    os.makedirs(cloud_dir, exist_ok=True)
    
    for i, link_info in enumerate(cloud_links, 1):
        service = link_info['service']
        url = link_info['url']
        
        print(f"\n[{i}/{len(cloud_links)}] {service}: {url[:60]}...")
        
        try:
            success = downloader.download_from_cloud(url, cloud_dir)
            if success:
                downloaded_files.append({'service': service, 'url': url})
                print(f"‚úÖ {service} —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {service} —Ñ–∞–π–ª")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {service}: {e}")
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        time.sleep(0.1)
    
    if downloaded_files:
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –æ–±–ª–∞—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(downloaded_files)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ —É—Å–ø–µ—à–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
        log_file = os.path.join(save_dir, "cloud_downloads.log")
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(f"\n=== {post_url} ===\n")
            f.write(f"–°–∫–∞—á–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            for file_info in downloaded_files:
                f.write(f"[{file_info['service']}] {file_info['url']}\n")
            f.write("\n")
    
    return downloaded_files

def get_file_type(filename):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
    if not filename:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    ext = os.path.splitext(filename.lower())[1]
    
    # 3D –º–æ–¥–µ–ª–∏ –∏ —Ñ–∞–π–ª—ã Blender
    if ext in ['.glb', '.gltf', '.blend', '.fbx', '.obj', '.dae', '.3ds', '.max', '.ma', '.mb']:
        return "3D –º–æ–¥–µ–ª—å"
    # –í–∏–¥–µ–æ
    elif ext in ['.mp4', '.avi', '.mkv', '.mov', '.webm', '.flv', '.wmv', '.m4v', '.mpg', '.mpeg']:
        return "–≤–∏–¥–µ–æ"
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    elif ext in ['.png', '.jpg', '.jpeg', '.gif', '.bmp', '.tiff', '.tga', '.psd', '.webp', '.svg']:
        return "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    # –ê—Ä—Ö–∏–≤—ã
    elif ext in ['.zip', '.rar', '.7z', '.tar', '.gz', '.bz2', '.xz']:
        return "–∞—Ä—Ö–∏–≤"
    # –î–æ–∫—É–º–µ–Ω—Ç—ã
    elif ext in ['.pdf', '.doc', '.docx', '.txt', '.rtf']:
        return "–¥–æ–∫—É–º–µ–Ω—Ç"
    # –ê—É–¥–∏–æ
    elif ext in ['.mp3', '.wav', '.flac', '.ogg', '.m4a', '.aac']:
        return "–∞—É–¥–∏–æ"
    # Unity –∏ –∏–≥—Ä–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    elif ext in ['.unity', '.unitypackage', '.prefab', '.asset']:
        return "Unity —Ä–µ—Å—É—Ä—Å"
    # –¢–µ–∫—Å—Ç—É—Ä—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    elif ext in ['.dds', '.hdr', '.exr', '.mat']:
        return "—Ç–µ–∫—Å—Ç—É—Ä–∞"
    # –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã
    elif ext in ['.exe', '.msi', '.dmg', '.apk', '.ipa']:
        return "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    else:
        return f"—Ñ–∞–π–ª {ext}" if ext else "—Ñ–∞–π–ª"

# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç thumbnail URL –≤ –ø–æ–ª–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def convert_thumbnail_to_full(url):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç //img.kemono.cr/thumbnail/data/... –≤ https://n3.kemono.cr/data/..."""
    if not url:
        return None
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL
    if url.startswith('//'):
        url = 'https:' + url
    elif url.startswith('/'):
        url = 'https://kemono.cr' + url
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º thumbnail –≤ –ø–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if 'thumbnail/data/' in url:
        # –ó–∞–º–µ–Ω—è–µ–º //img.kemono.cr/thumbnail/data/ –Ω–∞ https://n3.kemono.cr/data/
        # –ü—Ä–∏–º–µ—Ä: //img.kemono.cr/thumbnail/data/ce/15/ce152b1d...png -> https://n3.kemono.cr/data/ce/15/ce152b1d...png
        full_url = url.replace('//img.kemono.cr/thumbnail/data/', 'https://n3.kemono.cr/data/')
        full_url = full_url.replace('https://img.kemono.cr/thumbnail/data/', 'https://n3.kemono.cr/data/')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä ?f= –µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∫–æ–Ω—Ü–µ
        if '.' in os.path.basename(full_url):
            filename = os.path.basename(full_url)
            if '?' not in full_url:
                full_url += f'?f={filename}'
        
        return full_url
    
    return url

def get_creator_posts(creator_url):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ API —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    print("üîÑ –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ URL...")
    
    # –ü–∞—Ä—Å–∏–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è service –∏ creator_id
    if 'kemono.cr' in creator_url or 'kemono.party' in creator_url:
        parts = creator_url.split('/')
        if 'user' in parts:
            user_idx = parts.index('user')
            if user_idx + 1 < len(parts):
                service_idx = user_idx - 1
                if service_idx >= 0:
                    service = parts[service_idx]
                    creator_id = parts[user_idx + 1]
                    
                    print(f"üéØ Service: {service}")
                    print(f"üë§ Creator ID: {creator_id}")
                    
                    posts = []
                    offset = 0
                    limit = 50
                    
                    page = 1
                    while True:
                        try:
                            url = f"https://kemono.cr/api/v1/{service}/user/{creator_id}/posts?o={offset}"
                            print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} (offset {offset})...")
                            
                            response = requests.get(url, headers=HEADERS, verify=False, timeout=30)
                            
                            if response.status_code != 200:
                                print(f"  ‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                                break
                            
                            data = response.json()
                            
                            if not data or len(data) == 0:
                                print(f"  ‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤")
                                break
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å—Ç–æ–≤
                            batch_posts = [post['id'] for post in data if 'id' in post]
                            posts.extend(batch_posts)
                            
                            print(f"  üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –ø–æ–ª—É—á–µ–Ω–æ {len(batch_posts)} –ø–æ—Å—Ç–æ–≤, –≤—Å–µ–≥–æ: {len(posts)}")
                            
                            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ limit, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                            if len(data) < limit:
                                print(f"  üèÅ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ø–æ–ª—É—á–µ–Ω–æ {len(data)} < {limit})")
                                break
                            
                            offset += limit
                            page += 1
                            
                            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                            import time
                            time.sleep(0.5)
                            
                        except Exception as e:
                            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                            break
                    
                    print(f"  ‚úÖ –ò—Ç–æ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
                    post_urls = []
                    for post_id in posts:
                        post_url = f"https://kemono.cr/{service}/user/{creator_id}/post/{post_id}"
                        post_urls.append(post_url)
                    
                    return post_urls
    
    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL")
    return []

def get_post_media(post_url, enhanced_search=True, save_dir=None):
    """Universal –ø–æ–∏—Å–∫ –í–°–ï–• —Ñ–∞–π–ª–æ–≤ –≤ –ø–æ—Å—Ç–µ —á–µ—Ä–µ–∑ API"""
    print(f"  üìÑ –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ API: {post_url}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º service, creator_id –∏ post_id –∏–∑ URL
    try:
        parts = post_url.split('/')
        if 'kemono.cr' in post_url and 'user' in parts and 'post' in parts:
            service_idx = parts.index('kemono.cr') + 1
            user_idx = parts.index('user')
            post_idx = parts.index('post')
            
            service = parts[service_idx]
            creator_id = parts[user_idx + 1]
            post_id = parts[post_idx + 1]
            
            print(f"  üìÑ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ API: {service}/{creator_id}/post/{post_id}")
            
            api_url = f"https://kemono.cr/api/v1/{service}/user/{creator_id}/post/{post_id}"
            response = requests.get(api_url, headers=HEADERS, verify=False, timeout=15)
            
            print(f"  üì∂ API Status: {response.status_code}")
            
            if response.status_code != 200:
                return []
            
            data = response.json()
            
            print(f"  üîç UNIVERSAL SEARCH - –∏—â–µ–º –í–°–ï —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ (3D, –∞—Ä—Ö–∏–≤—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –º–µ–¥–∏–∞)")
            
            media_links = []
            found_files = []  # –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ –ø—É—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            added_file_paths = set()
            
            # 1. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø–æ—Å—Ç–∞ (–≤ post.file)
            post_data = data.get('post', {})
            if 'file' in post_data and post_data['file']:
                filename = post_data['file'].get('name', 'unknown')
                file_path = post_data['file'].get('path', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ filename –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π
                if isinstance(filename, str) and ('http' in filename or 'mega.nz' in filename or 'drive.google.com' in filename):
                    print(f"    ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –≤ filename: {filename[:60]}...")
                elif file_path and is_supported_file(filename):
                    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–æ–º–µ–Ω—ã (n3, n4, etc.)
                    file_url = f"https://n3.kemono.cr/data{file_path}?f={filename}"
                    file_type = get_file_type(filename)
                    print(f"    üìÅ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª ({file_type}): {filename}")
                    found_files.append(file_type)
                    media_links.append(file_url)
                    added_file_paths.add(file_path)
            
            # 1.1. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø–æ—Å—Ç–∞ (–ø—Ä—è–º–æ –≤ data.file, –µ—Å–ª–∏ –µ—Å—Ç—å)
            if 'file' in data and data['file']:
                filename = data['file'].get('name', 'unknown')
                file_path = data['file'].get('path', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ filename –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π
                if isinstance(filename, str) and ('http' in filename or 'mega.nz' in filename or 'drive.google.com' in filename):
                    print(f"    ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –≤ filename: {filename[:60]}...")
                elif file_path and is_supported_file(filename) and file_path not in added_file_paths:
                    file_url = f"https://n3.kemono.cr/data{file_path}?f={filename}"
                    file_type = get_file_type(filename)
                    print(f"    üìÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª ({file_type}): {filename}")
                    found_files.append(file_type)
                    media_links.append(file_url)
                    added_file_paths.add(file_path)
            
            # 2. –í–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞ (–≤ post.attachments) - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö
            if 'attachments' in post_data and post_data['attachments']:
                print(f"  üìé –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –≤ post: {len(post_data['attachments'])}")
                for attachment in post_data['attachments']:
                    filename = attachment.get('name', 'unknown')
                    file_path = attachment.get('path', '')
                    if file_path and filename != 'unknown' and file_path not in added_file_paths:
                        file_url = f"https://n3.kemono.cr/data{file_path}?f={filename}"
                        file_type = get_file_type(filename)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, –Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                        if is_supported_file(filename) or '.' in filename:
                            print(f"      üìé {file_type}: {filename}")
                            found_files.append(file_type)
                            media_links.append(file_url)
                            added_file_paths.add(file_path)
                        else:
                            print(f"      ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: {filename}")
            
            # 2.1. –í–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞ (–ø—Ä—è–º–æ –≤ data.attachments) - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö
            if 'attachments' in data and data['attachments']:
                print(f"  üìé –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è: {len(data['attachments'])}")
                for attachment in data['attachments']:
                    filename = attachment.get('name', 'unknown')
                    file_path = attachment.get('path', '')
                    if file_path and filename != 'unknown' and file_path not in added_file_paths:
                        file_url = f"https://n3.kemono.cr/data{file_path}?f={filename}"
                        file_type = get_file_type(filename)
                        
                        if (is_supported_file(filename) or '.' in filename):
                            print(f"      üìé {file_type}: {filename}")
                            found_files.append(file_type)
                            media_links.append(file_url)
                            added_file_paths.add(file_path)
            
            # 2.2. –ü—Ä–µ–≤—å—é —Ñ–∞–π–ª—ã (data.previews) - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö
            if 'previews' in data and data['previews']:
                print(f"  üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é: {len(data['previews'])}")
                for preview in data['previews']:
                    if isinstance(preview, dict):
                        filename = preview.get('name', 'unknown')
                        file_path = preview.get('path', '')
                        server = preview.get('server', 'https://n1.kemono.cr')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ filename –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π
                        if isinstance(filename, str) and ('http' in filename or 'mega.nz' in filename or 'drive.google.com' in filename):
                            print(f"      ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –≤ preview filename: {filename[:60]}...")
                            continue
                            
                        if file_path and filename != 'unknown' and file_path not in added_file_paths:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ n1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            if server and server.startswith('http'):
                                file_url = f"{server}/data{file_path}?f={filename}"
                            else:
                                file_url = f"https://n1.kemono.cr/data{file_path}?f={filename}"
                            
                            file_type = get_file_type(filename)
                            if (is_supported_file(filename) or '.' in filename):
                                print(f"      üñºÔ∏è {file_type}: {filename}")
                                found_files.append(file_type)
                                media_links.append(file_url)
                                added_file_paths.add(file_path)
            
            # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç
            for key in ['attachments', 'file']:
                if key in data and isinstance(data[key], list):
                    for item in data[key]:
                        if isinstance(item, dict):
                            filename = item.get('name', 'unknown')
                            file_path = item.get('path', '')
                            if file_path and file_path not in [link.split('?')[0].replace('https://n3.kemono.cr/data', '') for link in media_links]:
                                file_url = f"https://n3.kemono.cr/data{file_path}?f={filename}"
                                media_links.append(file_url)
            
            # 4. –ö–æ—Ä–Ω–µ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è
            if isinstance(data, dict):
                root_attachments = []
                for key, value in data.items():
                    if key == 'attachments' and isinstance(value, list):
                        root_attachments.extend(value)
                
                if root_attachments:
                    print(f"  üìé –ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä–Ω–µ–≤—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π: {len(root_attachments)}")
                    for attachment in root_attachments:
                        if isinstance(attachment, dict):
                            filename = attachment.get('name', 'unknown')
                            print(f"      ‚Ä¢ {filename}")
                        elif isinstance(attachment, str):
                            print(f"      ‚Ä¢ {attachment}")
            
            print(f"  ‚úÖ Enhanced —Ä–µ–∂–∏–º: –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –≤–ª–æ–∂–µ–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            
            # 5. Enhanced –ø–æ–∏—Å–∫ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
            content = data.get('content', '') or ''
            if not content and data.get('post'):
                content = data['post'].get('content', '') or ''
            
            print(f"  üîç Enhanced: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ò—â–µ–º –æ–±–ª–∞—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            cloud_links = []
            if content:
                cloud_links = detect_cloud_links(content)
                if cloud_links:
                    print(f"  ‚òÅÔ∏è –ù–∞–π–¥–µ–Ω–æ –æ–±–ª–∞—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {len(cloud_links)}")
                    cloud_stats = {}
                    for link_info in cloud_links:
                        service = link_info['service']
                        cloud_stats[service] = cloud_stats.get(service, 0) + 1
                    
                    for service, count in cloud_stats.items():
                        print(f"      ‚òÅÔ∏è {service}: {count}")
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ (–∏—Å–∫–ª—é—á–∞—è –æ–±–ª–∞—á–Ω—ã–µ)
            if content:
                content_links = find_media_links_in_content(content)
                if content_links:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±–ª–∞—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –∏—Ö –∫–∞–∫ —Ñ–∞–π–ª—ã
                    cloud_domains = ['drive.google.com', 'mega.nz', 'mega.co.nz', 'dropbox.com', 
                                   'onedrive.live.com', '1drv.ms', 'mediafire.com', 'we.tl', 
                                   'wetransfer.com', 'pcloud.com', 'disk.yandex.', 'box.com', 'icloud.com']
                    
                    filtered_links = []
                    for link in content_links:
                        is_cloud = any(domain in link.lower() for domain in cloud_domains)
                        if not is_cloud and link not in media_links:
                            filtered_links.append(link)
                    
                    if filtered_links:
                        print(f"  üîó Enhanced: –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ: {len(filtered_links)}")
                        for link in filtered_links:
                            media_links.append(link)
                            filename = link.split('/')[-1].split('?')[0][:50]
                            print(f"      üîó –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Å—ã–ª–∫–∞: {filename}...")
            
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π –Ω–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
        all_video_sources = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º post.attachments
        if data.get('post', {}).get('attachments'):
            all_video_sources.extend(data['post']['attachments'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ attachments
        if data.get('attachments'):
            all_video_sources.extend(data['attachments'])
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º videos —Å–µ–∫—Ü–∏—é
        if data.get('videos'):
            all_video_sources.extend(data['videos'])
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º previews (–º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∏–¥–µ–æ)
        if data.get('previews'):
            all_video_sources.extend(data['previews'])
        
        video_count = 0
        for item in all_video_sources:
            if isinstance(item, dict):
                name = item.get('name', '').lower()
                if any(ext in name for ext in ['.mp4', '.avi', '.mkv', '.mov', '.webm', '.gif']):
                    video_count += 1
        
        if video_count > 0:
            print(f"  üé¨ Enhanced: –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: {video_count}")
            for item in all_video_sources:
                if isinstance(item, dict):
                    name = item.get('name', '')
                    if any(ext in name.lower() for ext in ['.mp4', '.avi', '.mkv', '.mov', '.webm', '.gif']):
                        print(f"      üé¨ –í–∏–¥–µ–æ: {name}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
                        file_path = item.get('path', '')
                        if file_path:
                            file_url = f"https://n3.kemono.cr/data{file_path}?f={name}"
                            if file_url not in media_links:
                                media_links.append(file_url)
                                print(f"        üìé –î–æ–±–∞–≤–ª–µ–Ω–æ: {file_url}")
            
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        unique_links = list(dict.fromkeys(media_links))
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        found_files = []
        for link in unique_links:
            if '?f=' in link:
                filename = link.split('?f=')[-1]
            else:
                filename = link.split('/')[-1].split('?')[0]
            file_type = get_file_type(filename)
            found_files.append(file_type)
        
        if len(unique_links) > 0:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
            file_stats = {}
            for file_type in found_files:
                file_stats[file_type] = file_stats.get(file_type, 0) + 1
            
            print(f"   üéØ –ù–∞–π–¥–µ–Ω–æ {len(unique_links)} —Ñ–∞–π–ª–æ–≤:")
            for file_type, count in file_stats.items():
                print(f"     ‚Ä¢ {file_type}: {count}")
            
            print(f"   üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:")
            for f in unique_links:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if '?f=' in f:
                    display_name = f.split('?f=')[-1]
                else:
                    display_name = f.split('/')[-1]
                file_type = get_file_type(display_name)
                print(f"     üìé {display_name} ({file_type})")
        else:
            print(f"   ‚ö†Ô∏è API –Ω–µ –Ω–∞—à–µ–ª —Ñ–∞–π–ª—ã, –ø—Ä–æ–±—É–µ–º HTML –ø–∞—Ä—Å–∏–Ω–≥...")
            # –ï—Å–ª–∏ API –Ω–µ –Ω–∞—à–µ–ª –º–µ–¥–∏–∞, –ø—Ä–æ–±—É–µ–º HTML
            html_media = get_post_media_from_html_fallback(post_url)
            if html_media:
                print(f"   ‚úÖ HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞—à–µ–ª {len(html_media)} —Ñ–∞–π–ª–æ–≤!")
                return html_media
            else:
                print(f"   ‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–ª–∞—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–ª–∞—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º
        if 'cloud_links' in locals() and cloud_links and CLOUD_AUTO_ENABLED:
            try:
                print(f"  ‚òÅÔ∏è –ù–∞–π–¥–µ–Ω–æ –æ–±–ª–∞—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {len(cloud_links)}")
                # –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–∞—á–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
                if save_dir:
                    downloads_dir = save_dir
                else:
                    downloads_dir = os.path.join(os.getcwd(), "downloads")
                    
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                save_cloud_links(downloads_dir, cloud_links, post_url)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–∞—á–Ω—ã–µ —Ñ–∞–π–ª—ã
                downloader = CloudDownloader()
                for i, link_info in enumerate(cloud_links, 1):
                    service = link_info['service']
                    url = link_info['url']
                    print(f"    [{i}/{len(cloud_links)}] {service}: {url[:60]}...")
                    
                    try:
                        success = downloader.download_from_cloud(url, downloads_dir)
                        if success:
                            print(f"    ‚úÖ {service} —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω")
                        else:
                            print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {service} —Ñ–∞–π–ª")
                    except Exception as e:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {service}: {e}")
                        
            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–ª–∞—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {e}")
        
        return unique_links
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL –∏–ª–∏ API: {e}")
        # –ü—Ä–æ–±—É–µ–º HTML fallback –µ—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        print(f"  üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ HTML –ø–∞—Ä—Å–∏–Ω–≥...")
        return get_post_media_from_html_fallback(post_url)

def is_file_complete(filepath, expected_size=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é"""
    if not os.path.exists(filepath):
        return False
    
    file_size = os.path.getsize(filepath)
    
    # –§–∞–π–ª —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–µ–ø–æ–ª–Ω—ã–º –µ—Å–ª–∏ –æ–Ω –º–µ–Ω—å—à–µ 1KB (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω)
    if file_size < 1024:
        return False
    
    # –ï—Å–ª–∏ –∑–Ω–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    if expected_size and file_size != expected_size:
        return False
    
    return True

def get_download_progress_file(save_dir):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
    return os.path.join(save_dir, '.kemono_progress.json')

def load_download_progress(save_dir):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    progress_file = get_download_progress_file(save_dir)
    
    if not os.path.exists(progress_file):
        return {'completed_posts': [], 'completed_files': {}, 'started_at': None, 'last_update': None}
    
    try:
        with open(progress_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        return {'completed_posts': [], 'completed_files': {}, 'started_at': None, 'last_update': None}

def save_download_progress(save_dir, progress):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –≤ JSON —Ñ–∞–π–ª"""
    progress_file = get_download_progress_file(save_dir)
    progress['last_update'] = datetime.now().isoformat()
    
    try:
        with open(progress_file, 'w', encoding='utf-8') as f:
            json.dump(progress, f, indent=2, ensure_ascii=False)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

def download_files_parallel(media_links, save_dir, progress_data=None, max_workers=4, 
                           thread_callback=None, overall_callback=None, stop_check=None):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤
    thread_callback(thread_id, filename, progress, max_progress) - –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Ç–æ–∫–æ–≤
    overall_callback(current, total) - –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    stop_check() - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    """
    if not media_links:
        return 0
    
    print(f"üöÄ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {len(media_links)} —Ñ–∞–π–ª–æ–≤ –≤ {max_workers} –ø–æ—Ç–æ–∫–æ–≤")
    
    success_count = 0
    total_count = len(media_links)
    completed_files = 0
    lock = threading.Lock()
    
    def download_with_progress(args):
        nonlocal completed_files, success_count
        url, index = args
        thread_id = index % max_workers  # –õ–æ–≥–∏—á–µ—Å–∫–∏–π ID –ø–æ—Ç–æ–∫–∞ (0-4)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
        if stop_check and stop_check():
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if '?f=' in url:
            filename = url.split('?f=')[-1]
        else:
            filename = url.split('/')[-1].split('?')[0]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º GUI –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –ø–æ—Ç–æ–∫–µ
        if thread_callback:
            thread_callback(thread_id, filename, 0, 100)
            
        print(f"üîÑ –ü–æ—Ç–æ–∫-{thread_id}: –ù–∞—á–∏–Ω–∞–µ–º {filename[:40]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
        if stop_check and stop_check():
            return False
            
        result = download_file(url, save_dir, progress_data)
        
        with lock:
            completed_files += 1
            if result:
                success_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            if overall_callback:
                overall_callback(completed_files, total_count)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Ç–æ–∫–∞
            if thread_callback:
                thread_callback(thread_id, filename, 100, 100)
            
            status = '‚úÖ' if result else '‚ùå'
            print(f"üì• [{completed_files}/{total_count}] –ü–æ—Ç–æ–∫-{thread_id}: {status} {filename[:40]}")
        
        return result
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
    tasks = [(url, i) for i, url in enumerate(media_links)]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = [executor.submit(download_with_progress, task) for task in tasks]
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        for future in as_completed(futures):
            try:
                future.result()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
    
    print(f"üìä –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count}/{total_count} —Ñ–∞–π–ª–æ–≤")
    return success_count

def download_file(url, save_dir, progress_data=None):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∑—é–º–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if '?f=' in url:
            filename = url.split('?f=')[-1]
        else:
            filename = url.split('/')[-1].split('?')[0]
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_filename = "".join(c for c in filename if c.isalnum() or c in (' ', '-', '_', '.')).rstrip()
        if not safe_filename:
            safe_filename = 'unknown_file'
        
        filepath = os.path.join(save_dir, safe_filename)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        file_id = hashlib.md5(url.encode()).hexdigest()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª–Ω–æ—Ç—É —Ñ–∞–π–ª–∞
        if os.path.exists(filepath):
            if is_file_complete(filepath):
                print(f"‚úÖ –£–∂–µ —Å–∫–∞—á–∞–Ω–æ: {safe_filename}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if progress_data:
                    progress_data['completed_files'][file_id] = {
                        'url': url,
                        'filename': safe_filename,
                        'filepath': filepath,
                        'size': os.path.getsize(filepath),
                        'completed_at': datetime.now().isoformat()
                    }
                    save_download_progress(save_dir, progress_data)
                
                return True
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –ø–µ—Ä–µ–∫–∞—á–∏–≤–∞–µ–º: {safe_filename}")
                os.remove(filepath)
        
        # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ URL
        start_time = time.time()
        response = requests.get(url, headers=HEADERS, verify=False, timeout=15, stream=True)
        
        if response.status_code == 200:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            total_size = response.headers.get('content-length')
            if total_size:
                total_size = int(total_size)
                print(f"    üìä –†–∞–∑–º–µ—Ä: {total_size / 1024 / 1024:.1f} MB")
            
            with open(filepath, 'wb') as f:
                downloaded = 0
                for chunk in response.iter_content(chunk_size=65536):  # 64KB chunks –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
            
            file_size = os.path.getsize(filepath)
            download_time = time.time() - start_time
            speed_mbps = (file_size / 1024 / 1024) / download_time if download_time > 0 else 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
            if is_file_complete(filepath):
                print(f"    ‚úÖ –°–∫–∞—á–∞–Ω–æ: {safe_filename} ({file_size / 1024 / 1024:.1f} MB, {speed_mbps:.1f} MB/s)")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if progress_data:
                    progress_data['completed_files'][file_id] = {
                        'url': url,
                        'filename': safe_filename,
                        'filepath': filepath,
                        'size': file_size,
                        'completed_at': datetime.now().isoformat()
                    }
                    save_download_progress(save_dir, progress_data)
                
                return True
            else:
                print(f"    ‚ùå –§–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è –Ω–µ–ø–æ–ª–Ω–æ—Å—Ç—å—é: {safe_filename}")
                os.remove(filepath)  # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                return False
        
        # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –¥–æ–º–µ–Ω—ã
        print(f"    ‚ö†Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({response.status_code}), –∏—â–µ–º –Ω–∞ –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–∞—Ö...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ URL
        import re
        match = re.search(r'n\d+\.kemono\.cr(/data/.*)', url)
        if match:
            data_path = match.group(1)
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –¥–æ–º–µ–Ω—ã kemono
            domains = ['n1', 'n2', 'n3', 'n4', 'n5', 'n6']
            
            for domain in domains:
                try:
                    test_url = f"https://{domain}.kemono.cr{data_path}"
                    
                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HEAD –∑–∞–ø—Ä–æ—Å–æ–º
                    head_response = requests.head(test_url, headers=HEADERS, verify=False, timeout=15)
                    
                    if head_response.status_code == 200:
                        # –ï—Å–ª–∏ HEAD —É—Å–ø–µ—à–µ–Ω, —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                        response = requests.get(test_url, headers=HEADERS, verify=False, timeout=30, stream=True)
                        
                        if response.status_code == 200:
                            with open(filepath, 'wb') as f:
                                for chunk in response.iter_content(chunk_size=8192):
                                    if chunk:
                                        f.write(chunk)
                            
                            file_size = os.path.getsize(filepath)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
                            if is_file_complete(filepath):
                                print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞ {domain}: {safe_filename} ({file_size} –±–∞–π—Ç)")
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                                if progress_data:
                                    progress_data['completed_files'][file_id] = {
                                        'url': url,
                                        'filename': safe_filename,
                                        'filepath': filepath,
                                        'size': file_size,
                                        'completed_at': datetime.now().isoformat(),
                                        'domain': domain
                                    }
                                    save_download_progress(save_dir, progress_data)
                                
                                return True
                            else:
                                print(f"    ‚ùå –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –Ω–∞ {domain}: {safe_filename}")
                                os.remove(filepath)
                
                except Exception:
                    continue
        
        print(f"    ‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–∞—Ö: {safe_filename}")
        return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {url}: {e}")
        return False

def extract_creator_info(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –∏–∑ URL"""
    url = url.strip()
    
    if 'kemono.cr' in url or 'kemono.party' in url:
        parts = url.split('/')
        if 'user' in parts:
            user_idx = parts.index('user')
            if user_idx + 1 < len(parts):
                service_idx = user_idx - 1
                if service_idx >= 0:
                    service = parts[service_idx]
                    creator_id = parts[user_idx + 1]
                    return service, creator_id
    
    return None, None

def find_media_links_in_content(content):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    media_links = []
    
    # 1. –ü–∞—Ä—Å–∏–º HTML —Ç–µ–≥–∏ <a href="..."> –∏ <figure>
    html_patterns = [
        # fileThumb image-link href="..."
        r'<a[^>]*class="[^"]*fileThumb[^"]*image-link[^"]*"[^>]*href="([^"]+)"',
        # –õ—é–±—ã–µ img src="..." —Å kemono –¥–æ–º–µ–Ω–∞–º–∏
        r'<img[^>]*src="([^"]*(?:kemono\.cr|kemono\.party)[^"]*)"',
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ img src="/..." (kemono —Ñ–∞–π–ª—ã)
        r'<img[^>]*src="(/[^"]*\.(?:png|jpg|jpeg|gif|webp|svg|mp4|avi|mkv|mov|webm)[^"]*)"',
        # –õ—é–±—ã–µ a href="..." —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏
        r'<a[^>]*href="([^"]*(?:\.mp4|\.avi|\.mkv|\.mov|\.webm|\.zip|\.rar|\.jpg|\.png|\.gif|\.jpeg)[^"]*)"',
        # –õ—é–±—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ data/ –ø–∞–ø–∫–∏ kemono
        r'<[^>]*(?:href|src)="([^"]*(?:kemono\.cr|kemono\.party)[^"]*/data/[^"]*)"',
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ data/ –ø–∞–ø–∫–∏
        r'<[^>]*(?:href|src)="(/data/[^"]*)"',
    ]
    
    for pattern in html_patterns:
        matches = re.findall(pattern, content, re.IGNORECASE | re.DOTALL)
        for match in matches:
            # –û—á–∏—â–∞–µ–º –æ—Ç HTML entities –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            match = match.replace('&amp;', '&').rstrip('.,;:)')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –ø–æ–ª–Ω—ã–µ
            if match.startswith('/'):
                match = 'https://kemono.cr' + match
            elif match.startswith('//'):
                match = 'https:' + match
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï –æ–±–ª–∞—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
            cloud_domains = ['drive.google.com', 'mega.nz', 'mega.co.nz', 'dropbox.com', 
                            'onedrive.live.com', '1drv.ms', 'mediafire.com', 'we.tl', 
                            'wetransfer.com', 'pcloud.com', 'disk.yandex.', 'box.com', 
                            'icloud.com', 'patreon.com/media-u']
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±–ª–∞—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            is_cloud = any(domain in match.lower() for domain in cloud_domains)
            
            if not is_cloud and match not in media_links:
                media_links.append(match)
                print(f"      üì∏ HTML —Ç–µ–≥: {match.split('/')[-1][:50]}...")
    
    # 2. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ (–ò–°–ö–õ–Æ–ß–ê–Ø –æ–±–ª–∞—á–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—á–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    cloud_domains = ['drive.google.com', 'mega.nz', 'mega.co.nz', 'dropbox.com', 
                    'onedrive.live.com', '1drv.ms', 'mediafire.com', 'we.tl', 
                    'wetransfer.com', 'pcloud.com', 'disk.yandex.', 'box.com', 'icloud.com']
    
    url_patterns = [
        # –í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        r'https?://[^\s<>"]+\.(?:glb|gltf|blend|fbx|obj|dae|3ds|max|ma|mb)',  # 3D –º–æ–¥–µ–ª–∏
        r'https?://[^\s<>"]+\.(?:mp4|avi|mkv|mov|webm|flv|wmv|m4v|mpg|mpeg)',  # –í–∏–¥–µ–æ
        r'https?://[^\s<>"]+\.(?:png|jpg|jpeg|gif|bmp|tiff|tga|psd|webp|svg)',  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        r'https?://[^\s<>"]+\.(?:zip|rar|7z|tar|gz|bz2|xz)',  # –ê—Ä—Ö–∏–≤—ã
        r'https?://[^\s<>"]+\.(?:pdf|doc|docx|txt|rtf)',  # –î–æ–∫—É–º–µ–Ω—Ç—ã
        r'https?://[^\s<>"]+\.(?:mp3|wav|flac|ogg|m4a|aac)',  # –ê—É–¥–∏–æ
        r'https?://[^\s<>"]+\.(?:unity|unitypackage|prefab|asset)',  # Unity
        r'https?://[^\s<>"]+\.(?:dds|hdr|exr|mat)',  # –¢–µ–∫—Å—Ç—É—Ä—ã
        r'https?://[^\s<>"]+\.(?:exe|msi|dmg|apk|ipa)',  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        # Kemono –¥–∞–Ω–Ω—ã–µ (–¢–û–õ–¨–ö–û kemono, –±–µ–∑ –æ–±–ª–∞—á–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â)
        r'https?://[^\s<>"]*(?:kemono\.cr|kemono\.party)[^\s<>"]*/data/[^\s<>"]*',
    ]
    
    for pattern in url_patterns:
        matches = re.findall(pattern, content, re.IGNORECASE)
        for match in matches:
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ
            match = match.rstrip('.,;:)')
            
            # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï –æ–±–ª–∞—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
            is_cloud = any(domain in match.lower() for domain in cloud_domains)
            
            if not is_cloud and match not in media_links:
                media_links.append(match)
                print(f"      üîó –¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∞: {match.split('/')[-1][:50]}...")
    
    return media_links

def get_post_media_from_html_fallback(post_url):
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞ –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    print(f"  üåê –ü—Ä–æ–±—É–µ–º HTML –ø–∞—Ä—Å–∏–Ω–≥: {post_url}")
    
    try:
        session = requests.Session()
        session.headers.update({
            'User-Agent': STATIC_USER_AGENT,
            'Referer': 'https://kemono.cr/',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
        })
        
        response = session.get(post_url, verify=False, timeout=30)
        
        if response.status_code != 200:
            print(f"  ‚ùå HTML –æ—à–∏–±–∫–∞: {response.status_code}")
            return []
        
        from bs4 import BeautifulSoup
        soup = BeautifulSoup(response.content, 'html.parser')
        
        media_links = []
        
        # 1. –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (post__attachment-link)
        download_links = soup.find_all('a', class_='post__attachment-link')
        for link in download_links:
            href = link.get('href', '')
            filename = link.get('download', '')
            if href:
                media_links.append(href)
                print(f"    üìé HTML —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {filename}")
        
        # 2. –ò—â–µ–º –≤–∏–¥–µ–æ —Ç–µ–≥–∏
        video_tags = soup.find_all('video')
        for video in video_tags:
            sources = video.find_all('source')
            for source in sources:
                src = source.get('src', '')
                if src and src not in media_links:
                    media_links.append(src)
                    filename = src.split('/')[-1].split('?')[0]
                    print(f"    üé¨ HTML –≤–∏–¥–µ–æ: {filename}")
        
        # 3. –ò—â–µ–º –í–°–ï —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫)
        all_links = soup.find_all('a', href=True)
        for link in all_links:
            href = link['href']
            filename = href.split('/')[-1].split('?')[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
            if '.' in filename and is_supported_file(filename):
                if href.startswith('/'):
                    href = f"https://kemono.cr{href}"
                elif not href.startswith('http'):
                    continue
                
                if href not in media_links:
                    media_links.append(href)
                    file_type = get_file_type(filename)
                    print(f"    üîó HTML —Ñ–∞–π–ª ({file_type}): {filename}")
        
        # –ò—â–µ–º –æ–±–ª–∞—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        page_content = soup.get_text()
        cloud_links = detect_cloud_links(str(soup) + page_content)
        
        if cloud_links:
            print(f"  ‚òÅÔ∏è HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞—à–µ–ª –æ–±–ª–∞—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {len(cloud_links)}")
            cloud_stats = {}
            for link_info in cloud_links:
                service = link_info['service']
                cloud_stats[service] = cloud_stats.get(service, 0) + 1
            
            for service, count in cloud_stats.items():
                print(f"      ‚òÅÔ∏è {service}: {count}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–ª–∞—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            try:
                parts = post_url.split('/')
                if 'kemono.cr' in post_url and 'user' in parts:
                    service_idx = parts.index('kemono.cr') + 1
                    user_idx = parts.index('user')
                    service = parts[service_idx]
                    creator_id = parts[user_idx + 1]
                    
                    creator_folder = f"{service}_user_{creator_id}"
                    save_cloud_links(creator_folder, cloud_links, post_url)
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–∞—á–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                    if CLOUD_AUTO_ENABLED:
                        download_cloud_files(creator_folder, cloud_links, post_url)
            except Exception:
                pass
        
        if media_links:
            print(f"  ‚úÖ HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞—à–µ–ª {len(media_links)} —Ñ–∞–π–ª–æ–≤")
        else:
            print(f"  ‚ùå HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –Ω–∞—à–µ–ª –º–µ–¥–∏–∞")
        
        return media_links
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ HTML –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return []

# =====================================
# –ö–û–ù–°–û–õ–¨–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–°
# =====================================

def download_post_media(post_url, save_dir, progress_data=None):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∑—é–º–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º ID –ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        post_id = hashlib.md5(post_url.encode()).hexdigest()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if progress_data and post_id in progress_data.get('completed_posts', []):
            print(f"üìÑ –ü–æ—Å—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ: {post_url}")
            return True
        
        print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç: {post_url}")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –∏–∑ –ø–æ—Å—Ç–∞
        media_links = get_post_media(post_url, enhanced_search=True, save_dir=save_dir)
        
        # –û–±–ª–∞—á–Ω—ã–µ —Ñ–∞–π–ª—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ get_post_media
        
        if not media_links:
            print(f"  ‚ö†Ô∏è –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å—Ç–µ")
            return False
        
        print(f"  üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(media_links)}")
        
        # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        success_count = download_files_parallel(media_links, save_dir, progress_data, max_workers=3)
        
        # –û—Ç–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        if progress_data:
            if 'completed_posts' not in progress_data:
                progress_data['completed_posts'] = []
            
            progress_data['completed_posts'].append(post_id)
            save_download_progress(save_dir, progress_data)
        
        print(f"  ‚úÖ –ü–æ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {success_count}/{total_count} —Ñ–∞–π–ª–æ–≤")
        return success_count > 0
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞: {e}")
        return False

def download_creator_posts(creator_url, save_dir, post_limit=None):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∑—é–º–µ"""
    try:
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∑—é–º–µ...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_data = load_download_progress(save_dir)
        
        if not progress_data.get('started_at'):
            progress_data['started_at'] = datetime.now().isoformat()
            print("üÜï –ù–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ—Ä–∞")
        else:
            completed_posts = len(progress_data.get('completed_posts', []))
            completed_files = len(progress_data.get('completed_files', {}))
            print(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–≤—Ç–æ—Ä–∞")
            print(f"   –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {completed_posts}")
            print(f"   –£–∂–µ —Å–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {completed_files}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∞
        print("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤...")
        all_posts = get_creator_posts(creator_url)
        
        if not all_posts:
            print("‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return False
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if post_limit and post_limit > 0:
            posts = all_posts[:post_limit]
            print(f"üéØ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(all_posts)}")
        else:
            posts = all_posts
            print(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï {len(posts)} –ø–æ—Å—Ç–æ–≤")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        completed_post_ids = progress_data.get('completed_posts', [])
        pending_posts = []
        
        for post_url in posts:
            post_id = hashlib.md5(post_url.encode()).hexdigest()
            if post_id not in completed_post_ids:
                pending_posts.append(post_url)
        
        if not pending_posts:
            print("‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            return True
        
        print(f"üìã –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(pending_posts)} –ø–æ—Å—Ç–æ–≤ (–∏–∑ {len(posts)} –æ–±—â–∏—Ö)")
        
        total_downloaded = 0
        
        for i, post_url in enumerate(pending_posts):
            print(f"\nüìÑ [{i+1}/{len(pending_posts)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç...")
            
            if download_post_media(post_url, save_dir, progress_data):
                print(f"  ‚úÖ –ü–æ—Å—Ç {i+1} –∑–∞–≤–µ—Ä—à–µ–Ω")
            else:
                print(f"  ‚ö†Ô∏è –ü–æ—Å—Ç {i+1} –ø—Ä–æ–ø—É—â–µ–Ω")
            
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
            if i < len(pending_posts) - 1:
                import time
                time.sleep(0.1)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_completed_posts = len(progress_data.get('completed_posts', []))
        final_completed_files = len(progress_data.get('completed_files', {}))
        
        print(f"\nüéâ –ó–ê–ì–†–£–ó–ö–ê –ê–í–¢–û–†–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {final_completed_posts}")
        print(f"   –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {final_completed_files}")
        print(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –≤: {save_dir}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ—Ä–∞: {e}")
        return False

def show_download_status(save_dir):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
    progress_data = load_download_progress(save_dir)
    
    if not progress_data.get('started_at'):
        print("üìã –ó–∞–≥—Ä—É–∑–∫–∏ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    completed_posts = len(progress_data.get('completed_posts', []))
    completed_files = len(progress_data.get('completed_files', {}))
    started_at = progress_data.get('started_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    last_update = progress_data.get('last_update', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    print("üìä –°–¢–ê–¢–£–° –ó–ê–ì–†–£–ó–ö–ò")
    print("="*50)
    print(f"üìÖ –ù–∞—á–∞—Ç–∞: {started_at}")
    print(f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update}")
    print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {completed_posts}")
    print(f"üìÅ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {completed_files}")
    
    if completed_files > 0:
        print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        files = list(progress_data.get('completed_files', {}).values())
        for file_info in files[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
            filename = file_info.get('filename', 'unknown')
            size_mb = file_info.get('size', 0) / (1024 * 1024)
            print(f"  ‚Ä¢ {filename} ({size_mb:.1f} MB)")

def console_interface():
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("ü¶ä KemonoDownloader v2.8.1 Multithread - Console Edition")
    print("="*65)
    print("üéØ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –í–°–ï–• –§–ê–ô–õ–û–í:")
    print("üé≠ 3D –º–æ–¥–µ–ª–∏: GLB, GLTF, BLEND, FBX, OBJ, DAE, 3DS, MAX")
    print("üé¨ –í–∏–¥–µ–æ: MP4, MOV, AVI, MKV, WEBM, FLV, WMV")
    print("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: PNG, JPG, JPEG, GIF, BMP, TGA, PSD, SVG")
    print("üì¶ –ê—Ä—Ö–∏–≤—ã: ZIP, RAR, 7Z, TAR, GZ, BZ2, XZ")
    print("ÔøΩ –î–æ–∫—É–º–µ–Ω—Ç—ã: PDF, DOC, DOCX, TXT, RTF")
    print("üéµ –ê—É–¥–∏–æ: MP3, WAV, FLAC, OGG, M4A, AAC")
    print("üéÆ Unity: UNITY, UNITYPACKAGE, PREFAB, ASSET")
    print("üé® –¢–µ–∫—Å—Ç—É—Ä—ã: DDS, HDR, EXR, MAT")
    print("üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è: EXE, MSI, DMG, APK, IPA")
    print("ÔøΩüîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫—Ä–∞—à–∞")
    print("="*65)
    print("")
    print("‚òÅÔ∏è –ü–û–î–î–ï–†–ñ–ö–ê –û–ë–õ–ê–ß–ù–´–• –°–°–´–õ–û–ö:")
    print("üîó Google Drive, MEGA, Dropbox, OneDrive")
    print("üîó MediaFire, WeTransfer, pCloud, Yandex Disk")
    print("üîó Box, iCloud –∏ –¥—Ä—É–≥–∏–µ –æ–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã")
    print("üíæ –°—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª cloud_links.txt")
    
    print("üöÑ –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï:")
    print("   ‚ö° –î–æ 3 –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏")
    print("   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    if CLOUD_AUTO_ENABLED:
        print("üöÄ –ê–í–¢–û–°–ö–ê–ß–ò–í–ê–ù–ò–ï –û–ë–õ–ê–ß–ù–´–• –§–ê–ô–õ–û–í: ‚úÖ –í–ö–õ–Æ–ß–ï–ù–û")
        print("   üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É, —á—Ç–æ –∏ –º–µ–¥–∏–∞")
    else:
        print("‚ö†Ô∏è –ê–í–¢–û–°–ö–ê–ß–ò–í–ê–ù–ò–ï –û–ë–õ–ê–ß–ù–´–• –§–ê–ô–õ–û–í: ‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–û")
        print("   üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª cloud_downloader.py")
        
    print("="*67)
    
    while True:
        try:
            print("\nüîó –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
            print("   ‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∞: https://kemono.cr/patreon/user/12345")
            print("   ‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç: https://kemono.cr/patreon/user/12345/post/67890")
            print("   ‚Ä¢ 'status' - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–ø–∫–µ")
            print("   ‚Ä¢ 'exit' - –≤—ã—Ö–æ–¥")
            
            try:
                command = input("\nüëâ –ö–æ–º–∞–Ω–¥–∞: ").strip()
            except EOFError:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if command.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥', 'q']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if command.lower() == 'status':
                print(f"\nüìÅ –ì–¥–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å?")
                print("   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫")
                print("   ‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏")
                
                try:
                    status_folder = input("üëâ –ü–∞–ø–∫–∞: ").strip()
                except EOFError:
                    status_folder = "downloads"
                if not status_folder:
                    status_folder = "downloads"
                
                if os.path.exists(status_folder):
                    show_download_status(status_folder)
                else:
                    print("‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                
                print("\n" + "="*50)
                try:
                    input("üìå –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                except (EOFError, KeyboardInterrupt):
                    break
                continue
            
            if not command:
                print("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ URL
            url = command
            if 'kemono.cr' not in url:
                print("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ kemono.cr –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã!")
                continue
            
            print(f"\nüìÅ –ì–¥–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª—ã?")
            print("   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ")
            print("   ‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏")
            
            try:
                download_folder = input("üëâ –ü–∞–ø–∫–∞: ").strip()
            except EOFError:
                download_folder = "downloads"
            
            if not download_folder:
                download_folder = "downloads"
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            import os
            if not os.path.exists(download_folder):
                os.makedirs(download_folder)
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {download_folder}")
            
            print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
            print(f"üîó URL: {url}")
            print(f"üìÅ –ü–∞–ø–∫–∞: {download_folder}")
            print("="*50)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            if '/post/' in url:
                print("üìÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º...")
                success = download_post_media(url, download_folder)
                if success:
                    print(f"\n‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤: {download_folder}")
                else:
                    print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç")
            else:
                print("üë§ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–≤—Ç–æ—Ä, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã...")
                success = download_creator_posts(url, download_folder)
                if success:
                    print(f"\n‚úÖ –ê–≤—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤: {download_folder}")
                else:
                    print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤—Ç–æ—Ä–∞")
            
            print("\n" + "="*50)
            try:
                input("üìå –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            except (EOFError, KeyboardInterrupt):
                break
            
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except EOFError:
            print("\n\nüëã –í–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            try:
                input("üìå –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            except (EOFError, KeyboardInterrupt):
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break

if __name__ == "__main__":
    console_interface()