import requests
from bs4 import BeautifulSoup
import os
import json
import urllib3
import re
import urllib.parse

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π User-Agent –≤–º–µ—Å—Ç–æ fake-useragent
STATIC_USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"

HEADERS = {
    "User-Agent": STATIC_USER_AGENT,
    "Referer": "https://kemono.cr/", 
    "Accept": "text/css",  # –ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫!
    "Accept-Language": "en-US,en;q=0.9", 
    "Accept-Encoding": "gzip, deflate",  
    "Connection": "keep-alive"
}

# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç thumbnail URL –≤ –ø–æ–ª–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def convert_thumbnail_to_full(url):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç //img.kemono.cr/thumbnail/data/... –≤ https://n3.kemono.cr/data/..."""
    if not url:
        return None
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL
    if url.startswith('//'):
        url = 'https:' + url
    elif url.startswith('/'):
        url = 'https://kemono.cr' + url
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º thumbnail –≤ –ø–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if 'thumbnail/data/' in url:
        # –ó–∞–º–µ–Ω—è–µ–º //img.kemono.cr/thumbnail/data/ –Ω–∞ https://n3.kemono.cr/data/
        # –ü—Ä–∏–º–µ—Ä: //img.kemono.cr/thumbnail/data/ce/15/ce152b1d...png -> https://n3.kemono.cr/data/ce/15/ce152b1d...png
        full_url = url.replace('//img.kemono.cr/thumbnail/data/', 'https://n3.kemono.cr/data/')
        full_url = full_url.replace('https://img.kemono.cr/thumbnail/data/', 'https://n3.kemono.cr/data/')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä ?f= –µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∫–æ–Ω—Ü–µ
        if '.' in os.path.basename(full_url):
            filename = os.path.basename(full_url)
            if '?' not in full_url:
                full_url += f'?f={filename}'
        
        return full_url
    
    return url

def get_creator_posts(creator_url):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ API —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    print("üîÑ –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ URL...")
    
    # –ü–∞—Ä—Å–∏–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è service –∏ creator_id
    if 'kemono.cr' in creator_url or 'kemono.party' in creator_url:
        parts = creator_url.split('/')
        if 'user' in parts:
            user_idx = parts.index('user')
            if user_idx + 1 < len(parts):
                service_idx = user_idx - 1
                if service_idx >= 0:
                    service = parts[service_idx]
                    creator_id = parts[user_idx + 1]
                    
                    print(f"üéØ Service: {service}")
                    print(f"üë§ Creator ID: {creator_id}")
                    
                    posts = []
                    offset = 0
                    limit = 50
                    
                    while True:
                        try:
                            url = f"https://kemono.cr/api/v1/{service}/user/{creator_id}/posts?o={offset}"
                            print(f"–ó–∞–ø—Ä–æ—Å –∫ API: {url}")
                            
                            response = requests.get(url, headers=HEADERS, verify=False, timeout=30)
                            
                            if response.status_code != 200:
                                print(f"  ‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                                break
                            
                            data = response.json()
                            
                            if not data or len(data) == 0:
                                print(f"  ‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤")
                                break
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å—Ç–æ–≤
                            batch_posts = [post['id'] for post in data if 'id' in post]
                            posts.extend(batch_posts)
                            
                            print(f"  üìä –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(batch_posts)}, –≤—Å–µ–≥–æ: {len(posts)}")
                            
                            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ limit, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                            if len(data) < limit:
                                break
                            
                            offset += limit
                            
                        except Exception as e:
                            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                            break
                    
                    print(f"  ‚úÖ –ò—Ç–æ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
                    post_urls = []
                    for post_id in posts:
                        post_url = f"https://kemono.cr/{service}/user/{creator_id}/post/{post_id}"
                        post_urls.append(post_url)
                    
                    return post_urls
    
    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL")
    return []

def get_post_media(post_url, enhanced_search=True):
    """Enhanced –ø–æ–∏—Å–∫ –º–µ–¥–∏–∞ –≤ –ø–æ—Å—Ç–µ —á–µ—Ä–µ–∑ API"""
    print(f"  üìÑ –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ API: {post_url}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º service, creator_id –∏ post_id –∏–∑ URL
    try:
        parts = post_url.split('/')
        if 'kemono.cr' in post_url and 'user' in parts and 'post' in parts:
            service_idx = parts.index('kemono.cr') + 1
            user_idx = parts.index('user')
            post_idx = parts.index('post')
            
            service = parts[service_idx]
            creator_id = parts[user_idx + 1]
            post_id = parts[post_idx + 1]
            
            print(f"  üìÑ –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ API: {service}/{creator_id}/post/{post_id}")
            
            api_url = f"https://kemono.cr/api/v1/{service}/user/{creator_id}/post/{post_id}"
            response = requests.get(api_url, headers=HEADERS, verify=False, timeout=30)
            
            print(f"  üì∂ API Status: {response.status_code}")
            
            if response.status_code != 200:
                return []
            
            data = response.json()
            
            print(f"  üîç Enhanced API Search –í–ö–õ–Æ–ß–ï–ù - –∏—â–µ–º –í–°–ï –º–µ–¥–∏–∞ (—Ñ–∞–π–ª—ã + –≤–ª–æ–∂–µ–Ω–∏—è + –∫–æ–Ω—Ç–µ–Ω—Ç)")
            
            media_links = []
            
            # 1. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø–æ—Å—Ç–∞ (–≤ post.file)
            post_data = data.get('post', {})
            if 'file' in post_data and post_data['file']:
                filename = post_data['file'].get('name', 'unknown')
                file_path = post_data['file'].get('path', '')
                if file_path:
                    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–æ–º–µ–Ω—ã (n3, n4, etc.)
                    file_url = f"https://n3.kemono.cr/data{file_path}?f={filename}"
                    print(f"    üìÅ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: {filename}")
                    print(f"       URL: {file_url}")
                    media_links.append(file_url)
            
            # 1.1. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø–æ—Å—Ç–∞ (–ø—Ä—è–º–æ –≤ data.file, –µ—Å–ª–∏ –µ—Å—Ç—å)
            if 'file' in data and data['file']:
                filename = data['file'].get('name', 'unknown')
                file_path = data['file'].get('path', '')
                if file_path:
                    file_url = f"https://n3.kemono.cr/data{file_path}?f={filename}"
                    print(f"    üìÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: {filename}")
                    print(f"       URL: {file_url}")
                    if file_url not in media_links:
                        media_links.append(file_url)
            
            # 2. –í–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞ (–≤ post.attachments)
            if 'attachments' in post_data and post_data['attachments']:
                print(f"  üìé –ù–∞–π–¥–µ–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–π –≤ post: {len(post_data['attachments'])}")
                for attachment in post_data['attachments']:
                    filename = attachment.get('name', 'unknown')
                    file_path = attachment.get('path', '')
                    if file_path:
                        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–æ–º–µ–Ω—ã kemono
                        file_url = f"https://n3.kemono.cr/data{file_path}?f={filename}"
                        print(f"      ‚Ä¢ {filename}")
                        print(f"        URL: {file_url}")
                        media_links.append(file_url)
            
            # 2.1. –í–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å—Ç–∞ (–ø—Ä—è–º–æ –≤ data.attachments)
            if 'attachments' in data and data['attachments']:
                print(f"  üìé –ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä–Ω–µ–≤—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π: {len(data['attachments'])}")
                for attachment in data['attachments']:
                    filename = attachment.get('name', 'unknown')
                    file_path = attachment.get('path', '')
                    if file_path:
                        file_url = f"https://n3.kemono.cr/data{file_path}?f={filename}"
                        print(f"      ‚Ä¢ {filename}")
                        print(f"        URL: {file_url}")
                        if file_url not in media_links:
                            media_links.append(file_url)
            
            # 2.2. –ü—Ä–µ–≤—å—é —Ñ–∞–π–ª—ã (data.previews)
            if 'previews' in data and data['previews']:
                print(f"  üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–≤—å—é: {len(data['previews'])}")
                for preview in data['previews']:
                    if isinstance(preview, dict):
                        filename = preview.get('name', 'unknown')
                        file_path = preview.get('path', '')
                        server = preview.get('server', 'https://n1.kemono.cr')
                        if file_path:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ n1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            if server and server.startswith('http'):
                                file_url = f"{server}/data{file_path}?f={filename}"
                            else:
                                file_url = f"https://n1.kemono.cr/data{file_path}?f={filename}"
                            print(f"      üñºÔ∏è {filename}")
                            print(f"        URL: {file_url}")
                            if file_url not in media_links:
                                media_links.append(file_url)
            
            # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç
            for key in ['attachments', 'file']:
                if key in data and isinstance(data[key], list):
                    for item in data[key]:
                        if isinstance(item, dict):
                            filename = item.get('name', 'unknown')
                            file_path = item.get('path', '')
                            if file_path and file_path not in [link.split('?')[0].replace('https://n3.kemono.cr/data', '') for link in media_links]:
                                file_url = f"https://n3.kemono.cr/data{file_path}?f={filename}"
                                media_links.append(file_url)
            
            # 4. –ö–æ—Ä–Ω–µ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è
            if isinstance(data, dict):
                root_attachments = []
                for key, value in data.items():
                    if key == 'attachments' and isinstance(value, list):
                        root_attachments.extend(value)
                
                if root_attachments:
                    print(f"  üìé –ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä–Ω–µ–≤—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π: {len(root_attachments)}")
                    for attachment in root_attachments:
                        if isinstance(attachment, dict):
                            filename = attachment.get('name', 'unknown')
                            print(f"      ‚Ä¢ {filename}")
                        elif isinstance(attachment, str):
                            print(f"      ‚Ä¢ {attachment}")
            
            print(f"  ‚úÖ Enhanced —Ä–µ–∂–∏–º: –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –≤–ª–æ–∂–µ–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            
            # 5. Enhanced –ø–æ–∏—Å–∫ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
            content = data.get('content', '') or ''
            if not content and data.get('post'):
                content = data['post'].get('content', '') or ''
            
            print(f"  üîç Enhanced: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            if content:
                content_links = find_media_links_in_content(content)
                if content_links:
                    print(f"  üîó Enhanced: –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ: {len(content_links)}")
                    for link in content_links:
                        if link not in media_links:
                            media_links.append(link)
                            filename = link.split('/')[-1].split('?')[0][:50]
                            print(f"      üîó –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Å—ã–ª–∫–∞: {filename}...")
            
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π –Ω–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
        all_video_sources = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º post.attachments
        if data.get('post', {}).get('attachments'):
            all_video_sources.extend(data['post']['attachments'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ attachments
        if data.get('attachments'):
            all_video_sources.extend(data['attachments'])
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º videos —Å–µ–∫—Ü–∏—é
        if data.get('videos'):
            all_video_sources.extend(data['videos'])
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º previews (–º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∏–¥–µ–æ)
        if data.get('previews'):
            all_video_sources.extend(data['previews'])
        
        video_count = 0
        for item in all_video_sources:
            if isinstance(item, dict):
                name = item.get('name', '').lower()
                if any(ext in name for ext in ['.mp4', '.avi', '.mkv', '.mov', '.webm', '.gif']):
                    video_count += 1
        
        if video_count > 0:
            print(f"  üé¨ Enhanced: –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: {video_count}")
            for item in all_video_sources:
                if isinstance(item, dict):
                    name = item.get('name', '')
                    if any(ext in name.lower() for ext in ['.mp4', '.avi', '.mkv', '.mov', '.webm', '.gif']):
                        print(f"      üé¨ –í–∏–¥–µ–æ: {name}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
                        file_path = item.get('path', '')
                        if file_path:
                            file_url = f"https://n3.kemono.cr/data{file_path}?f={name}"
                            if file_url not in media_links:
                                media_links.append(file_url)
                                print(f"        üìé –î–æ–±–∞–≤–ª–µ–Ω–æ: {file_url}")
            
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_links = list(dict.fromkeys(media_links))
        
        if len(unique_links) > 0:
            print(f"   üìé –°–∫–∞—á–∏–≤–∞—é {len(unique_links)} —Ñ–∞–π–ª–æ–≤:")
            for f in unique_links:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if '?f=' in f:
                    display_name = f.split('?f=')[-1]
                else:
                    display_name = f.split('/')[-1]
                print(f"     ‚Ä¢ {display_name}")
        else:
            print(f"   ‚ö†Ô∏è API –Ω–µ –Ω–∞—à–µ–ª –º–µ–¥–∏–∞, –ø—Ä–æ–±—É–µ–º HTML –ø–∞—Ä—Å–∏–Ω–≥...")
            # –ï—Å–ª–∏ API –Ω–µ –Ω–∞—à–µ–ª –º–µ–¥–∏–∞, –ø—Ä–æ–±—É–µ–º HTML
            html_media = get_post_media_from_html_fallback(post_url)
            if html_media:
                print(f"   ‚úÖ HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞—à–µ–ª {len(html_media)} —Ñ–∞–π–ª–æ–≤!")
                return html_media
            else:
                print(f"   ‚ùå –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        return unique_links
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL –∏–ª–∏ API: {e}")
        # –ü—Ä–æ–±—É–µ–º HTML fallback –µ—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        print(f"  üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ HTML –ø–∞—Ä—Å–∏–Ω–≥...")
        return get_post_media_from_html_fallback(post_url)

def download_file(url, save_dir):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if '?f=' in url:
            filename = url.split('?f=')[-1]
        else:
            filename = url.split('/')[-1].split('?')[0]
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_filename = "".join(c for c in filename if c.isalnum() or c in (' ', '-', '_', '.')).rstrip()
        if not safe_filename:
            safe_filename = 'unknown_file'
        
        filepath = os.path.join(save_dir, safe_filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists(filepath):
            print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {safe_filename}")
            return True
        
        # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ URL
        response = requests.get(url, headers=HEADERS, verify=False, timeout=30, stream=True)
        
        if response.status_code == 200:
            with open(filepath, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
            
            file_size = os.path.getsize(filepath)
            print(f"    ‚úÖ –°–∫–∞—á–∞–Ω–æ: {safe_filename} ({file_size} –±–∞–π—Ç)")
            return True
        
        # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –¥–æ–º–µ–Ω—ã
        print(f"    ‚ö†Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({response.status_code}), –∏—â–µ–º –Ω–∞ –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–∞—Ö...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏–∑ URL
        import re
        match = re.search(r'n\d+\.kemono\.cr(/data/.*)', url)
        if match:
            data_path = match.group(1)
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –¥–æ–º–µ–Ω—ã kemono
            domains = ['n1', 'n2', 'n3', 'n4', 'n5', 'n6']
            
            for domain in domains:
                try:
                    test_url = f"https://{domain}.kemono.cr{data_path}"
                    
                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HEAD –∑–∞–ø—Ä–æ—Å–æ–º
                    head_response = requests.head(test_url, headers=HEADERS, verify=False, timeout=15)
                    
                    if head_response.status_code == 200:
                        # –ï—Å–ª–∏ HEAD —É—Å–ø–µ—à–µ–Ω, —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                        response = requests.get(test_url, headers=HEADERS, verify=False, timeout=30, stream=True)
                        
                        if response.status_code == 200:
                            with open(filepath, 'wb') as f:
                                for chunk in response.iter_content(chunk_size=8192):
                                    if chunk:
                                        f.write(chunk)
                            
                            file_size = os.path.getsize(filepath)
                            print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞ {domain}: {safe_filename} ({file_size} –±–∞–π—Ç)")
                            return True
                
                except Exception:
                    continue
        
        print(f"    ‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–∞—Ö: {safe_filename}")
        return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {url}: {e}")
        return False

def extract_creator_info(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –∏–∑ URL"""
    url = url.strip()
    
    if 'kemono.cr' in url or 'kemono.party' in url:
        parts = url.split('/')
        if 'user' in parts:
            user_idx = parts.index('user')
            if user_idx + 1 < len(parts):
                service_idx = user_idx - 1
                if service_idx >= 0:
                    service = parts[service_idx]
                    creator_id = parts[user_idx + 1]
                    return service, creator_id
    
    return None, None

def find_media_links_in_content(content):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    media_links = []
    
    # 1. –ü–∞—Ä—Å–∏–º HTML —Ç–µ–≥–∏ <a href="..."> –∏ <figure>
    html_patterns = [
        # fileThumb image-link href="..."
        r'<a[^>]*class="[^"]*fileThumb[^"]*image-link[^"]*"[^>]*href="([^"]+)"',
        # –õ—é–±—ã–µ img src="..." —Å kemono –¥–æ–º–µ–Ω–∞–º–∏
        r'<img[^>]*src="([^"]*(?:kemono\.cr|kemono\.party)[^"]*)"',
        # –õ—é–±—ã–µ a href="..." —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏
        r'<a[^>]*href="([^"]*(?:\.mp4|\.avi|\.mkv|\.mov|\.webm|\.zip|\.rar|\.jpg|\.png|\.gif|\.jpeg)[^"]*)"',
        # –õ—é–±—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ data/ –ø–∞–ø–∫–∏ kemono
        r'<[^>]*(?:href|src)="([^"]*(?:kemono\.cr|kemono\.party)[^"]*/data/[^"]*)"',
    ]
    
    for pattern in html_patterns:
        matches = re.findall(pattern, content, re.IGNORECASE | re.DOTALL)
        for match in matches:
            # –û—á–∏—â–∞–µ–º –æ—Ç HTML entities –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            match = match.replace('&amp;', '&').rstrip('.,;:)')
            # –î–æ–±–∞–≤–ª—è–µ–º https:// –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å //
            if match.startswith('//'):
                match = 'https:' + match
            if match not in media_links and 'kemono.cr' in match:
                media_links.append(match)
                print(f"      üì∏ HTML —Ç–µ–≥: {match.split('/')[-1][:50]}...")
    
    # 2. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
    url_patterns = [
        r'https?://[^\s<>"]+\.(?:mp4|avi|mkv|mov|webm|zip|rar|jpg|png|gif|jpeg)',
        r'https?://[^\s<>"]*(?:drive\.google\.com|mega\.nz|dropbox\.com|mediafire\.com|onedrive\.live\.com)[^\s<>"]*',
        r'https?://[^\s<>"]*(?:kemono\.cr|kemono\.party)[^\s<>"]*/data/[^\s<>"]*',
    ]
    
    for pattern in url_patterns:
        matches = re.findall(pattern, content, re.IGNORECASE)
        for match in matches:
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–æ–Ω—Ü–µ
            match = match.rstrip('.,;:)')
            if match not in media_links:
                media_links.append(match)
                print(f"      üîó –¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∞: {match.split('/')[-1][:50]}...")
    
    return media_links

def get_post_media_from_html_fallback(post_url):
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞ –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    print(f"  üåê –ü—Ä–æ–±—É–µ–º HTML –ø–∞—Ä—Å–∏–Ω–≥: {post_url}")
    
    try:
        session = requests.Session()
        session.headers.update({
            'User-Agent': STATIC_USER_AGENT,
            'Referer': 'https://kemono.cr/',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
        })
        
        response = session.get(post_url, verify=False, timeout=30)
        
        if response.status_code != 200:
            print(f"  ‚ùå HTML –æ—à–∏–±–∫–∞: {response.status_code}")
            return []
        
        from bs4 import BeautifulSoup
        soup = BeautifulSoup(response.content, 'html.parser')
        
        media_links = []
        
        # 1. –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (post__attachment-link)
        download_links = soup.find_all('a', class_='post__attachment-link')
        for link in download_links:
            href = link.get('href', '')
            filename = link.get('download', '')
            if href:
                media_links.append(href)
                print(f"    üìé HTML —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {filename}")
        
        # 2. –ò—â–µ–º –≤–∏–¥–µ–æ —Ç–µ–≥–∏
        video_tags = soup.find_all('video')
        for video in video_tags:
            sources = video.find_all('source')
            for source in sources:
                src = source.get('src', '')
                if src and src not in media_links:
                    media_links.append(src)
                    filename = src.split('/')[-1].split('?')[0]
                    print(f"    üé¨ HTML –≤–∏–¥–µ–æ: {filename}")
        
        # 3. –ò—â–µ–º –æ–±—ã—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–¥–∏–∞
        all_links = soup.find_all('a', href=True)
        for link in all_links:
            href = link['href']
            if any(ext in href.lower() for ext in ['.mp4', '.avi', '.mkv', '.mov', '.webm', '.zip', '.rar']):
                if href.startswith('/'):
                    href = f"https://kemono.cr{href}"
                elif not href.startswith('http'):
                    continue
                
                if href not in media_links:
                    media_links.append(href)
                    filename = href.split('/')[-1].split('?')[0]
                    print(f"    üîó HTML —Å—Å—ã–ª–∫–∞: {filename}")
        
        if media_links:
            print(f"  ‚úÖ HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞—à–µ–ª {len(media_links)} —Ñ–∞–π–ª–æ–≤")
        else:
            print(f"  ‚ùå HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ –Ω–∞—à–µ–ª –º–µ–¥–∏–∞")
        
        return media_links
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ HTML –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return []

# =====================================
# –ö–û–ù–°–û–õ–¨–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–°
# =====================================

def console_interface():
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("ü¶ä KemonoDownloader v2.3 Final - Console Edition")
    print("="*50)
    print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
    print("üé¨ –í–∏–¥–µ–æ: MP4, MOV, AVI, MKV, WEBM")
    print("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: PNG, JPG, JPEG, GIF")
    print("üì¶ –ê—Ä—Ö–∏–≤—ã: ZIP, RAR")
    print("="*50)
    
    while True:
        try:
            print("\nüîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞:")
            print("   ‚Ä¢ –ê–≤—Ç–æ—Ä–∞: https://kemono.cr/patreon/user/12345")
            print("   ‚Ä¢ –ü–æ—Å—Ç: https://kemono.cr/patreon/user/12345/post/67890")
            print("   ‚Ä¢ –ò–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
            
            url = input("\nüëâ –°—Å—ã–ª–∫–∞: ").strip()
            
            if url.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥', 'q']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not url:
                print("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!")
                continue
            
            if 'kemono.cr' not in url:
                print("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ kemono.cr!")
                continue
            
            print(f"\nüìÅ –ì–¥–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª—ã?")
            print("   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ")
            print("   ‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏")
            
            download_folder = input("üëâ –ü–∞–ø–∫–∞: ").strip()
            
            if not download_folder:
                download_folder = "downloads"
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            import os
            if not os.path.exists(download_folder):
                os.makedirs(download_folder)
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {download_folder}")
            
            print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
            print(f"üîó URL: {url}")
            print(f"üìÅ –ü–∞–ø–∫–∞: {download_folder}")
            print("="*50)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            if '/post/' in url:
                print("üìÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º...")
                success = download_post_media(url, download_folder)
                if success:
                    print(f"\n‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤: {download_folder}")
                else:
                    print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç")
            else:
                print("üë§ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–≤—Ç–æ—Ä, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã...")
                success = download_creator_posts(url, download_folder)
                if success:
                    print(f"\n‚úÖ –ê–≤—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤: {download_folder}")
                else:
                    print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤—Ç–æ—Ä–∞")
            
            print("\n" + "="*50)
            input("üìå –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            input("üìå –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    console_interface()