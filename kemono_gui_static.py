#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
KemonoDownloader GUI v2.3 - Images Fixed - –í–µ—Ä—Å–∏—è –±–µ–∑ fake-useragent –¥–ª—è exe
–£–ª—É—á—à–µ–Ω–∏—è v2.3:
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å MP4 –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞–º–∏
- –ê–≤—Ç–æ–ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –¥–æ–º–µ–Ω–∞—Ö (n1-n6.kemono.cr)
- HTML fallback –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å API
- –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –º–µ–¥–∏–∞ –≤–æ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏—è—Ö
"""

import sys
import os
import time
import threading
import json
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                           QHBoxLayout, QLabel, QLineEdit, QPushButton, QTextEdit, 
                           QProgressBar, QSpinBox, QDoubleSpinBox, QCheckBox,
                           QFileDialog, QGroupBox, QGridLayout, QMessageBox)
from PyQt6.QtCore import QThread, pyqtSignal, Qt, QSettings
from PyQt6.QtGui import QFont, QIcon

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –±–µ–∑ fake-useragent (—Å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–º –¥–æ–º–µ–Ω–æ–≤)
sys.path.append(os.path.dirname(__file__))
from downloader_static import get_creator_posts, get_post_media, download_file
import requests
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class DownloaderWorker(QThread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    progress = pyqtSignal(int, int)  # —Ç–µ–∫—É—â–∏–π, –≤—Å–µ–≥–æ
    log = pyqtSignal(str)
    finished = pyqtSignal(int)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    batch_progress = pyqtSignal(int, int)  # —Ç–µ–∫—É—â–∞—è –ø–∞—á–∫–∞, –≤—Å–µ–≥–æ –ø–∞—á–µ–∫
    
    def __init__(self, creator_url, settings):
        super().__init__()
        self.creator_url = creator_url
        self.settings = settings
        self.running = True
        
    def stop(self):
        self.running = False
        
    def extract_creator_info(self, url):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –∏–∑ URL"""
        url = url.strip()
        
        if 'kemono.cr' in url or 'kemono.party' in url:
            parts = url.split('/')
            if 'user' in parts:
                user_idx = parts.index('user')
                if user_idx + 1 < len(parts):
                    service_idx = user_idx - 1
                    if service_idx >= 0:
                        service = parts[service_idx]
                        creator_id = parts[user_idx + 1]
                        return service, creator_id
        
        return None, None
    
    def get_creator_info(self, service, creator_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–≤—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ API"""
        try:
            session = requests.Session()
            session.headers.update({
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Referer': 'https://kemono.cr/',
                'Accept': 'text/css',
                'Accept-Language': 'en-US,en;q=0.9',
                'Accept-Encoding': 'gzip, deflate',
                'Connection': 'keep-alive'
            })
            
            url = f"https://kemono.cr/api/v1/{service}/user/{creator_id}"
            response = session.get(url, verify=False, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                name = data.get('name', f'Unknown_{creator_id}')
                # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–∞–ø–∫–∏
                safe_name = "".join(c for c in name if c.isalnum() or c in (' ', '-', '_')).strip()
                safe_name = safe_name.replace(' ', '_')  # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
                if not safe_name:
                    safe_name = f'Creator_{creator_id}'
                
                return {
                    'name': name,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    'safe_name': safe_name,  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è –ø–∞–ø–∫–∏
                    'service': data.get('service', service),
                    'id': creator_id
                }
            
        except Exception as e:
            self.log.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∞: {e}")
        
        return {
            'name': f'Creator {creator_id}',
            'safe_name': f'Creator_{creator_id}',
            'service': service,
            'id': creator_id
        }
    
    def run(self):
        try:
            self.log.emit("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
            service, creator_id = self.extract_creator_info(self.creator_url)
            if not service or not creator_id:
                self.log.emit("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL!")
                self.finished.emit(0)
                return
            
            self.log.emit(f"üéØ Service: {service}, Creator ID: {creator_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
            creator_info = self.get_creator_info(service, creator_id)
            self.log.emit(f"üë§ –ê–≤—Ç–æ—Ä: {creator_info['name']}")
            self.log.emit(f"üè∑Ô∏è Service: {creator_info['service']}")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫: downloads/service/author_name_id/
            service_dir = os.path.join(self.settings['download_dir'], creator_info['service'])
            folder_name = f"{creator_info['safe_name']}_{creator_info['id']}"
            save_dir = os.path.join(service_dir, folder_name)
            os.makedirs(save_dir, exist_ok=True)
            self.log.emit(f"üìÅ –ü–∞–ø–∫–∞: {save_dir}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∞
            self.log.emit("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤...")
            all_posts = get_creator_posts(self.creator_url)
            
            if not all_posts:
                self.log.emit("‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                self.finished.emit(0)
                return
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if self.settings['post_limit'] and self.settings['post_limit'] > 0:
                posts = all_posts[:self.settings['post_limit']]
                self.log.emit(f"üéØ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(all_posts)}")
            else:
                posts = all_posts
                self.log.emit(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï {len(posts)} –ø–æ—Å—Ç–æ–≤")
            
            # –ü–∞—á–∫–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            batch_size = self.settings['batch_size']
            batch_pause = self.settings['batch_pause']
            total_batches = (len(posts) + batch_size - 1) // batch_size
            total_downloaded = 0
            
            self.log.emit(f"üì¶ –ü–∞—á–µ–∫: {total_batches} –ø–æ {batch_size} –ø–æ—Å—Ç–æ–≤")
            
            for batch_num in range(total_batches):
                if not self.running:
                    break
                    
                start_idx = batch_num * batch_size
                end_idx = min(start_idx + batch_size, len(posts))
                batch_posts = posts[start_idx:end_idx]
                
                self.batch_progress.emit(batch_num + 1, total_batches)
                self.log.emit(f"\nüì¶ –ü–ê–ß–ö–ê {batch_num + 1}/{total_batches} (–ø–æ—Å—Ç—ã {start_idx + 1}-{end_idx})")
                
                batch_downloaded = 0
                
                for i, post_url in enumerate(batch_posts):
                    if not self.running:
                        break
                        
                    global_idx = start_idx + i
                    self.progress.emit(global_idx, len(posts))
                    
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞
                        media_links = get_post_media(post_url, enhanced_search=True)
                        
                        if media_links:
                            self.log.emit(f"  üìÑ [{global_idx + 1}/{len(posts)}] –ù–∞–π–¥–µ–Ω–æ {len(media_links)} —Ñ–∞–π–ª–æ–≤")
                            
                            for j, link in enumerate(media_links):
                                if not self.running:
                                    break
                                    
                                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                                if '?f=' in link:
                                    filename = link.split('?f=')[-1]
                                else:
                                    filename = link.split('/')[-1].split('?')[0]
                                
                                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø—Ä—è–º–æ –≤ –ø–∞–ø–∫—É –∞–≤—Ç–æ—Ä–∞
                                success = download_file(link, save_dir)
                                if success:
                                    total_downloaded += 1
                                    batch_downloaded += 1
                                    self.log.emit(f"    ‚úÖ {filename}")
                                else:
                                    self.log.emit(f"    ‚ùå –û—à–∏–±–∫–∞: {filename}")
                                
                                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
                        else:
                            self.log.emit(f"  üìÑ [{global_idx + 1}/{len(posts)}] –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                            
                    except Exception as e:
                        self.log.emit(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞ {global_idx + 1}: {e}")
                
                self.log.emit(f"‚úÖ –ü–∞—á–∫–∞ {batch_num + 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {batch_downloaded} —Ñ–∞–π–ª–æ–≤")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏
                if batch_num < total_batches - 1 and self.running:
                    self.log.emit(f"‚è∏Ô∏è –ü–∞—É–∑–∞ {batch_pause}—Å...")
                    time.sleep(batch_pause)
            
            if self.running:
                self.log.emit(f"\nüéâ –ó–ê–í–ï–†–®–ï–ù–û! –°–∫–∞—á–∞–Ω–æ {total_downloaded} —Ñ–∞–π–ª–æ–≤")
                self.log.emit(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –≤: {save_dir}")
            else:
                self.log.emit(f"\n‚èπÔ∏è –û–°–¢–ê–ù–û–í–õ–ï–ù–û. –°–∫–∞—á–∞–Ω–æ {total_downloaded} —Ñ–∞–π–ª–æ–≤")
            
            self.finished.emit(total_downloaded)
            
        except Exception as e:
            self.log.emit(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.finished.emit(0)

class KemonoDownloaderGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.worker = None
        self.settings = QSettings("KemonoDownloader", "GUI")
        self.init_ui()
        self.load_settings()
        
    def init_ui(self):
        self.setWindowTitle("ü¶ä KemonoDownloader GUI v2.3 - Images Fixed")
        self.setGeometry(100, 100, 800, 700)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("ü¶ä KemonoDownloader GUI v2.3 - Images Fixed")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_font = QFont()
        title_font.setPointSize(18)
        title_font.setBold(True)
        title.setFont(title_font)
        title.setStyleSheet("QLabel { color: #4fc3f7; padding: 15px; }")
        layout.addWidget(title)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ URL
        url_group = QGroupBox("üìù URL –∞–≤—Ç–æ—Ä–∞")
        url_layout = QVBoxLayout(url_group)
        
        self.url_input = QLineEdit()
        self.url_input.setPlaceholderText("https://kemono.cr/patreon/user/12345678")
        url_layout.addWidget(self.url_input)
        
        layout.addWidget(url_group)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        settings_group = QGroupBox("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_layout = QGridLayout(settings_group)
        
        # –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫
        settings_layout.addWidget(QLabel("üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫:"), 0, 0)
        self.download_dir_input = QLineEdit()
        self.download_dir_input.setText(os.path.join(os.getcwd(), "downloads"))
        settings_layout.addWidget(self.download_dir_input, 0, 1)
        
        self.browse_btn = QPushButton("üìÇ –û–±–∑–æ—Ä")
        self.browse_btn.clicked.connect(self.browse_directory)
        settings_layout.addWidget(self.browse_btn, 0, 2)
        
        # –†–∞–∑–º–µ—Ä –ø–∞—á–∫–∏
        settings_layout.addWidget(QLabel("üì¶ –†–∞–∑–º–µ—Ä –ø–∞—á–∫–∏:"), 1, 0)
        self.batch_size_input = QSpinBox()
        self.batch_size_input.setRange(1, 50)
        self.batch_size_input.setValue(5)
        self.batch_size_input.valueChanged.connect(self.save_settings)
        settings_layout.addWidget(self.batch_size_input, 1, 1)
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏
        settings_layout.addWidget(QLabel("‚è±Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏ (—Å–µ–∫):"), 2, 0)
        self.batch_pause_input = QDoubleSpinBox()
        self.batch_pause_input.setRange(0.1, 60.0)
        self.batch_pause_input.setValue(2.0)
        self.batch_pause_input.setSingleStep(0.5)
        self.batch_pause_input.valueChanged.connect(self.save_settings)
        settings_layout.addWidget(self.batch_pause_input, 2, 1)
        
        # –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤
        settings_layout.addWidget(QLabel("üéØ –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ (0 = –≤—Å–µ):"), 3, 0)
        self.post_limit_input = QSpinBox()
        self.post_limit_input.setRange(0, 10000)
        self.post_limit_input.setValue(0)
        self.post_limit_input.setSpecialValueText("–í—Å–µ –ø–æ—Å—Ç—ã")
        self.post_limit_input.valueChanged.connect(self.save_settings)
        settings_layout.addWidget(self.post_limit_input, 3, 1)
        
        # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        settings_layout.addWidget(QLabel("üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞:"), 4, 0)
        self.dark_theme_checkbox = QCheckBox("–í–∫–ª—é—á–µ–Ω–æ")
        self.dark_theme_checkbox.setChecked(True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–º–Ω–∞—è
        self.dark_theme_checkbox.stateChanged.connect(self.toggle_theme)
        settings_layout.addWidget(self.dark_theme_checkbox, 4, 1)
        
        layout.addWidget(settings_group)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        self.start_btn = QPushButton("üöÄ –ù–∞—á–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ")
        self.start_btn.clicked.connect(self.start_download)
        self.start_btn.setProperty("class", "success")
        buttons_layout.addWidget(self.start_btn)
        
        self.stop_btn = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.clicked.connect(self.stop_download)
        self.stop_btn.setEnabled(False)
        self.stop_btn.setProperty("class", "danger")
        buttons_layout.addWidget(self.stop_btn)
        
        self.open_folder_btn = QPushButton("üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É")
        self.open_folder_btn.clicked.connect(self.open_download_folder)
        self.open_folder_btn.setProperty("class", "primary")
        buttons_layout.addWidget(self.open_folder_btn)
        
        layout.addLayout(buttons_layout)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_group = QGroupBox("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
        progress_layout = QVBoxLayout(progress_group)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å—Ç–æ–≤
        self.post_progress_label = QLabel("–ü–æ—Å—Ç—ã: 0 / 0")
        progress_layout.addWidget(self.post_progress_label)
        
        self.post_progress = QProgressBar()
        progress_layout.addWidget(self.post_progress)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—á–µ–∫
        self.batch_progress_label = QLabel("–ü–∞—á–∫–∏: 0 / 0")
        progress_layout.addWidget(self.batch_progress_label)
        
        self.batch_progress = QProgressBar()
        progress_layout.addWidget(self.batch_progress)
        
        layout.addWidget(progress_group)
        
        # –õ–æ–≥
        log_group = QGroupBox("üìã –õ–æ–≥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        log_layout = QVBoxLayout(log_group)
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setMaximumHeight(250)
        log_layout.addWidget(self.log_text)
        
        layout.addWidget(log_group)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.download_dir_input.setText(
            self.settings.value("download_dir", os.path.join(os.getcwd(), "downloads"))
        )
        self.batch_size_input.setValue(
            int(self.settings.value("batch_size", 5))
        )
        self.batch_pause_input.setValue(
            float(self.settings.value("batch_pause", 2.0))
        )
        self.post_limit_input.setValue(
            int(self.settings.value("post_limit", 0))
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–µ–º—ã
        dark_theme = self.settings.value("dark_theme", True, type=bool)
        self.dark_theme_checkbox.setChecked(dark_theme)
        self.apply_theme(dark_theme)
        
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.settings.setValue("download_dir", self.download_dir_input.text())
        self.settings.setValue("batch_size", self.batch_size_input.value())
        self.settings.setValue("batch_pause", self.batch_pause_input.value())
        self.settings.setValue("post_limit", self.post_limit_input.value())
        self.settings.setValue("dark_theme", self.dark_theme_checkbox.isChecked())
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞"""
        self.save_settings()
        if self.worker and self.worker.isRunning():
            reply = QMessageBox.question(
                self, 
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –≤—ã–π—Ç–∏?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No
            )
            if reply == QMessageBox.StandardButton.Yes:
                if self.worker:
                    self.worker.stop()
                    self.worker.wait()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()
    
    def browse_directory(self):
        directory = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫")
        if directory:
            self.download_dir_input.setText(directory)
            self.save_settings()
    
    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–º—É"""
        dark_theme = self.dark_theme_checkbox.isChecked()
        self.apply_theme(dark_theme)
        self.save_settings()
    
    def apply_theme(self, dark_theme=True):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É"""
        if dark_theme:
            self.apply_dark_theme()
        else:
            self.apply_light_theme()
    
    def apply_dark_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É"""
        QApplication.instance().setStyleSheet(self.get_dark_theme_style())
    
    def apply_light_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É"""
        QApplication.instance().setStyleSheet(self.get_light_theme_style())
    
    def get_dark_theme_style(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã"""
        return """
        /* –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ */
        QMainWindow {
            background-color: #2b2b2b;
            color: #ffffff;
        }
        
        QWidget {
            background-color: #2b2b2b;
            color: #ffffff;
        }
        
        /* –ì—Ä—É–ø–ø—ã */
        QGroupBox {
            font-weight: bold;
            color: #ffffff;
            border: 2px solid #555555;
            border-radius: 8px;
            margin-top: 1ex;
            padding-top: 12px;
            background-color: #3a3a3a;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 10px;
            padding: 0 8px 0 8px;
            color: #4fc3f7;
        }
        
        /* –ü–æ–ª—è –≤–≤–æ–¥–∞ */
        QLineEdit, QSpinBox, QDoubleSpinBox {
            background-color: #404040;
            border: 2px solid #555555;
            border-radius: 6px;
            padding: 8px;
            color: #ffffff;
            font-size: 10pt;
        }
        QLineEdit:focus, QSpinBox:focus, QDoubleSpinBox:focus {
            border-color: #4fc3f7;
            background-color: #4a4a4a;
        }
        
        /* –ß–µ–∫–±–æ–∫—Å—ã */
        QCheckBox {
            color: #ffffff;
            font-size: 10pt;
        }
        QCheckBox::indicator {
            width: 18px;
            height: 18px;
        }
        QCheckBox::indicator:unchecked {
            background-color: #404040;
            border: 2px solid #555555;
            border-radius: 3px;
        }
        QCheckBox::indicator:checked {
            background-color: #4fc3f7;
            border: 2px solid #4fc3f7;
            border-radius: 3px;
        }
        
        /* –ö–Ω–æ–ø–∫–∏ */
        QPushButton {
            background-color: #404040;
            border: 2px solid #666666;
            border-radius: 6px;
            padding: 8px 15px;
            color: #ffffff;
            font-weight: bold;
            font-size: 10pt;
        }
        QPushButton:hover {
            background-color: #505050;
            border-color: #777777;
        }
        QPushButton:pressed {
            background-color: #353535;
        }
        QPushButton:disabled {
            background-color: #2a2a2a;
            color: #666666;
            border-color: #444444;
        }
        
        /* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã */
        QProgressBar {
            background-color: #404040;
            border: 2px solid #555555;
            border-radius: 6px;
            text-align: center;
            color: #ffffff;
            font-weight: bold;
        }
        QProgressBar::chunk {
            background-color: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #4fc3f7, stop:1 #29b6f6);
            border-radius: 4px;
        }
        
        /* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ */
        QTextEdit {
            background-color: #1e1e1e;
            border: 2px solid #555555;
            border-radius: 6px;
            color: #ffffff;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 9pt;
            padding: 5px;
        }
        
        /* Labels */
        QLabel {
            color: #ffffff;
            font-size: 10pt;
        }
        
        /* –°—Ç–∞—Ç—É—Å –±–∞—Ä */
        QStatusBar {
            background-color: #3a3a3a;
            color: #ffffff;
            border-top: 1px solid #555555;
        }
        
        /* –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã */
        QScrollBar:vertical {
            background-color: #404040;
            width: 12px;
            border-radius: 6px;
        }
        QScrollBar::handle:vertical {
            background-color: #666666;
            border-radius: 6px;
            min-height: 20px;
        }
        QScrollBar::handle:vertical:hover {
            background-color: #777777;
        }
        
        /* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ */
        QPushButton[class="success"] {
            background-color: #2e7d32;
            border-color: #4caf50;
        }
        QPushButton[class="success"]:hover {
            background-color: #388e3c;
        }
        
        QPushButton[class="danger"] {
            background-color: #c62828;
            border-color: #f44336;
        }
        QPushButton[class="danger"]:hover {
            background-color: #d32f2f;
        }
        
        QPushButton[class="primary"] {
            background-color: #1565c0;
            border-color: #2196f3;
        }
        QPushButton[class="primary"]:hover {
            background-color: #1976d2;
        }
        """
    
    def get_light_theme_style(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã"""
        return """
        /* –û—Å–Ω–æ–≤–Ω–∞—è —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ */
        QMainWindow {
            background-color: #f5f5f5;
            color: #000000;
        }
        
        QWidget {
            background-color: #f5f5f5;
            color: #000000;
        }
        
        /* –ì—Ä—É–ø–ø—ã */
        QGroupBox {
            font-weight: bold;
            color: #000000;
            border: 2px solid #cccccc;
            border-radius: 8px;
            margin-top: 1ex;
            padding-top: 12px;
            background-color: #ffffff;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 10px;
            padding: 0 8px 0 8px;
            color: #1976d2;
        }
        
        /* –ü–æ–ª—è –≤–≤–æ–¥–∞ */
        QLineEdit, QSpinBox, QDoubleSpinBox {
            background-color: #ffffff;
            border: 2px solid #ddd;
            border-radius: 6px;
            padding: 8px;
            color: #000000;
            font-size: 10pt;
        }
        QLineEdit:focus, QSpinBox:focus, QDoubleSpinBox:focus {
            border-color: #1976d2;
            background-color: #f8f9fa;
        }
        
        /* –ß–µ–∫–±–æ–∫—Å—ã */
        QCheckBox {
            color: #000000;
            font-size: 10pt;
        }
        QCheckBox::indicator {
            width: 18px;
            height: 18px;
        }
        QCheckBox::indicator:unchecked {
            background-color: #ffffff;
            border: 2px solid #ddd;
            border-radius: 3px;
        }
        QCheckBox::indicator:checked {
            background-color: #1976d2;
            border: 2px solid #1976d2;
            border-radius: 3px;
        }
        
        /* –ö–Ω–æ–ø–∫–∏ */
        QPushButton {
            background-color: #ffffff;
            border: 2px solid #ddd;
            border-radius: 6px;
            padding: 8px 15px;
            color: #000000;
            font-weight: bold;
            font-size: 10pt;
        }
        QPushButton:hover {
            background-color: #f0f0f0;
            border-color: #bbb;
        }
        QPushButton:pressed {
            background-color: #e0e0e0;
        }
        QPushButton:disabled {
            background-color: #f5f5f5;
            color: #999999;
            border-color: #e0e0e0;
        }
        
        /* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã */
        QProgressBar {
            background-color: #ffffff;
            border: 2px solid #ddd;
            border-radius: 6px;
            text-align: center;
            color: #000000;
            font-weight: bold;
        }
        QProgressBar::chunk {
            background-color: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #1976d2, stop:1 #42a5f5);
            border-radius: 4px;
        }
        
        /* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ */
        QTextEdit {
            background-color: #ffffff;
            border: 2px solid #ddd;
            border-radius: 6px;
            color: #000000;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 9pt;
            padding: 5px;
        }
        
        /* Labels */
        QLabel {
            color: #000000;
            font-size: 10pt;
        }
        
        /* –°—Ç–∞—Ç—É—Å –±–∞—Ä */
        QStatusBar {
            background-color: #ffffff;
            color: #000000;
            border-top: 1px solid #ddd;
        }
        
        /* –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã */
        QScrollBar:vertical {
            background-color: #f0f0f0;
            width: 12px;
            border-radius: 6px;
        }
        QScrollBar::handle:vertical {
            background-color: #c0c0c0;
            border-radius: 6px;
            min-height: 20px;
        }
        QScrollBar::handle:vertical:hover {
            background-color: #a0a0a0;
        }
        
        /* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ */
        QPushButton[class="success"] {
            background-color: #4caf50;
            border-color: #4caf50;
            color: #ffffff;
        }
        QPushButton[class="success"]:hover {
            background-color: #45a049;
        }
        
        QPushButton[class="danger"] {
            background-color: #f44336;
            border-color: #f44336;
            color: #ffffff;
        }
        QPushButton[class="danger"]:hover {
            background-color: #da190b;
        }
        
        QPushButton[class="primary"] {
            background-color: #2196f3;
            border-color: #2196f3;
            color: #ffffff;
        }
        QPushButton[class="primary"]:hover {
            background-color: #0b7dda;
        }
        """
    
    def open_download_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏"""
        download_dir = self.download_dir_input.text()
        if os.path.exists(download_dir):
            import subprocess
            import platform
            
            if platform.system() == "Windows":
                os.startfile(download_dir)
            elif platform.system() == "Darwin":  # macOS
                subprocess.call(["open", download_dir])
            else:  # Linux
                subprocess.call(["xdg-open", download_dir])
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    
    def start_download(self):
        url = self.url_input.text().strip()
        if not url:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ URL –∞–≤—Ç–æ—Ä–∞!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        download_dir = self.download_dir_input.text()
        os.makedirs(download_dir, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = {
            'download_dir': download_dir,
            'batch_size': self.batch_size_input.value(),
            'batch_pause': self.batch_pause_input.value(),
            'post_limit': self.post_limit_input.value() if self.post_limit_input.value() > 0 else None
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫
        self.worker = DownloaderWorker(url, settings)
        self.worker.progress.connect(self.update_post_progress)
        self.worker.batch_progress.connect(self.update_batch_progress)
        self.worker.log.connect(self.add_log)
        self.worker.finished.connect(self.download_finished)
        
        self.worker.start()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.statusBar().showMessage("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        self.log_text.clear()
        
    def stop_download(self):
        if self.worker:
            self.worker.stop()
            self.add_log("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
            
    def update_post_progress(self, current, total):
        self.post_progress.setMaximum(total)
        self.post_progress.setValue(current)
        self.post_progress_label.setText(f"–ü–æ—Å—Ç—ã: {current} / {total}")
        
    def update_batch_progress(self, current, total):
        self.batch_progress.setMaximum(total)
        self.batch_progress.setValue(current)
        self.batch_progress_label.setText(f"–ü–∞—á–∫–∏: {current} / {total}")
        
    def add_log(self, message):
        self.log_text.append(message)
        # –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
        scrollbar = self.log_text.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
        
    def download_finished(self, files_count):
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        
        if files_count > 0:
            self.statusBar().showMessage(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –°–∫–∞—á–∞–Ω–æ {files_count} —Ñ–∞–π–ª–æ–≤")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É
            reply = QMessageBox.question(
                self, 
                "–£—Å–ø–µ—Ö", 
                f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_count}\n\n–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.Yes
            )
            if reply == QMessageBox.StandardButton.Yes:
                self.open_download_folder()
        else:
            self.statusBar().showMessage("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        self.worker = None

def main():
    app = QApplication(sys.argv)
    app.setApplicationName("KemonoDownloader GUI v2.3 - Images Fixed")
    
    # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ (—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –≤ load_settings)
    window = KemonoDownloaderGUI()
    window.show()
    
    sys.exit(app.exec())

if __name__ == "__main__":
    main()