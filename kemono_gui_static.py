#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü¶ä KemonoDownloader v2.8.2 Progress - Multi-threaded File Downloader
–ù–æ–≤–æ–µ –≤ v2.7 Progress:
- üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- üöÑ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –¥–ª—è –≤—Å–µ—Ö 5 –ø–æ—Ç–æ–∫–æ–≤ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è  
- üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
- üîç –ß–∏—Å—Ç—ã–π –ª–æ–≥ —Ç–æ–ª—å–∫–æ —Å –æ—à–∏–±–∫–∞–º–∏ –∏ –≤–∞–∂–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
- ‚ö° 5 –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
- –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò–ó –û–ë–õ–ê–ß–ù–´–• –•–†–ê–ù–ò–õ–ò–©!
- –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ –í–°–ï–• —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ (61 —Ñ–æ—Ä–º–∞—Ç)
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Google Drive, MEGA, Dropbox, MediaFire
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 3D –º–æ–¥–µ–ª–µ–π: GLB, GLTF, BLEND, FBX, OBJ
- Unity —Ä–µ—Å—É—Ä—Å—ã: UNITY, UNITYPACKAGE, PREFAB
- –û–±–ª–∞—á–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É, —á—Ç–æ –∏ –º–µ–¥–∏–∞
"""

import sys
import os
import time
import threading
import json
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                           QHBoxLayout, QLabel, QLineEdit, QPushButton, QTextEdit, 
                           QProgressBar, QSpinBox, QDoubleSpinBox, QCheckBox,
                           QFileDialog, QGroupBox, QGridLayout, QMessageBox)
from PyQt6.QtCore import QThread, pyqtSignal, Qt, QSettings
from PyQt6.QtGui import QFont, QIcon

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –±–µ–∑ fake-useragent (—Å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–º –¥–æ–º–µ–Ω–æ–≤)
sys.path.append(os.path.dirname(__file__))
from downloader_static import (get_creator_posts, get_post_media, download_file, 
                              load_download_progress, save_download_progress, 
                              download_creator_posts, show_download_status,
                              detect_cloud_links, download_cloud_files,
                              download_files_parallel)
import requests
import urllib3
import hashlib
from datetime import datetime

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class DownloaderWorker(QThread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    progress = pyqtSignal(int, int)  # —Ç–µ–∫—É—â–∏–π, –≤—Å–µ–≥–æ
    thread_progress = pyqtSignal(int, str, int, int)  # thread_id, filename, current, total 
    overall_progress = pyqtSignal(int, int)  # completed_files, total_files
    log = pyqtSignal(str)  # —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∏ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    finished = pyqtSignal(int)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    
    def __init__(self, creator_url, settings):
        super().__init__()
        self.creator_url = creator_url
        self.settings = settings
        self.running = True
        
    def stop(self):
        self.running = False
        
    def extract_creator_info(self, url):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –∏–∑ URL"""
        url = url.strip()
        
        if 'kemono.cr' in url or 'kemono.party' in url:
            parts = url.split('/')
            if 'user' in parts:
                user_idx = parts.index('user')
                if user_idx + 1 < len(parts):
                    service_idx = user_idx - 1
                    if service_idx >= 0:
                        service = parts[service_idx]
                        creator_id = parts[user_idx + 1]
                        return service, creator_id
        
        return None, None
    
    def get_creator_info(self, service, creator_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–≤—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ API"""
        try:
            session = requests.Session()
            session.headers.update({
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Referer': 'https://kemono.cr/',
                'Accept': 'text/css',
                'Accept-Language': 'en-US,en;q=0.9',
                'Accept-Encoding': 'gzip, deflate',
                'Connection': 'keep-alive'
            })
            
            url = f"https://kemono.cr/api/v1/{service}/user/{creator_id}"
            response = session.get(url, verify=False, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                name = data.get('name', f'Unknown_{creator_id}')
                # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–∞–ø–∫–∏
                safe_name = "".join(c for c in name if c.isalnum() or c in (' ', '-', '_')).strip()
                safe_name = safe_name.replace(' ', '_')  # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
                if not safe_name:
                    safe_name = f'Creator_{creator_id}'
                
                return {
                    'name': name,  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    'safe_name': safe_name,  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è –ø–∞–ø–∫–∏
                    'service': data.get('service', service),
                    'id': creator_id
                }
            
        except Exception as e:
            self.log.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∞: {e}")
        
        return {
            'name': f'Creator {creator_id}',
            'safe_name': f'Creator_{creator_id}',
            'service': service,
            'id': creator_id
        }
    
    def run(self):
        try:
            self.log.emit("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
            service, creator_id = self.extract_creator_info(self.creator_url)
            if not service or not creator_id:
                self.log.emit("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL!")
                self.finished.emit(0)
                return
            
            self.log.emit(f"üéØ Service: {service}, Creator ID: {creator_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
            creator_info = self.get_creator_info(service, creator_id)
            self.log.emit(f"üë§ –ê–≤—Ç–æ—Ä: {creator_info['name']}")
            self.log.emit(f"üè∑Ô∏è Service: {creator_info['service']}")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫: downloads/service/author_name_id/
            service_dir = os.path.join(self.settings['download_dir'], creator_info['service'])
            folder_name = f"{creator_info['safe_name']}_{creator_info['id']}"
            save_dir = os.path.join(service_dir, folder_name)
            os.makedirs(save_dir, exist_ok=True)
            self.log.emit(f"üìÅ –ü–∞–ø–∫–∞: {save_dir}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            progress_data = load_download_progress(save_dir)
            
            if not progress_data.get('started_at'):
                progress_data['started_at'] = datetime.now().isoformat()
                self.log.emit("üÜï –ù–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ—Ä–∞")
            else:
                completed_posts = len(progress_data.get('completed_posts', []))
                completed_files = len(progress_data.get('completed_files', {}))
                self.log.emit(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–≤—Ç–æ—Ä–∞")
                self.log.emit(f"   –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {completed_posts}")
                self.log.emit(f"   –£–∂–µ —Å–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {completed_files}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∞
            self.log.emit("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤...")
            all_posts = get_creator_posts(self.creator_url)
            
            if not all_posts:
                self.log.emit("‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                self.finished.emit(0)
                return
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if self.settings['post_limit'] and self.settings['post_limit'] > 0:
                posts = all_posts[:self.settings['post_limit']]
                self.log.emit(f"üéØ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(all_posts)}")
            else:
                posts = all_posts
                self.log.emit(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï {len(posts)} –ø–æ—Å—Ç–æ–≤")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            completed_post_ids = progress_data.get('completed_posts', [])
            pending_posts = []
            
            for post_url in posts:
                post_id = hashlib.md5(post_url.encode()).hexdigest()
                if post_id not in completed_post_ids:
                    pending_posts.append(post_url)
            
            if not pending_posts:
                self.log.emit("‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
                completed_files = len(progress_data.get('completed_files', {}))
                self.finished.emit(completed_files)
                return
            
            self.log.emit(f"üìã –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(pending_posts)} –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ (–∏–∑ {len(posts)} –æ–±—â–∏—Ö)")
            
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –í–°–ï —Ñ–∞–π–ª—ã, –ø–æ—Ç–æ–º —Å–∫–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–æ–≤–æ
            total_downloaded = len(progress_data.get('completed_files', {}))  # –£–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            
            self.log.emit(f"üîç –®–∞–≥ 1: –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ {len(pending_posts)} –ø–æ—Å—Ç–æ–≤...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
            all_media_links = []
            processed_posts = []
            
            for i, post_url in enumerate(pending_posts):
                if not self.running:
                    break
                    
                self.progress.emit(i, len(pending_posts))
                self.log.emit(f"üìÑ [{i + 1}/{len(pending_posts)}] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å—Ç...")
                    
                try:
                    post_id = hashlib.md5(post_url.encode()).hexdigest()
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–æ—Å—Ç–∞
                    media_links = get_post_media(post_url, enhanced_search=True, save_dir=save_dir)
                    
                    if media_links:
                        self.log.emit(f"   üìé –ù–∞–π–¥–µ–Ω–æ {len(media_links)} —Ñ–∞–π–ª–æ–≤")
                        all_media_links.extend(media_links)
                        processed_posts.append(post_id)
                    else:
                        self.log.emit(f"   ‚ö†Ô∏è –ú–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        processed_posts.append(post_id)  # –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                        
                except Exception as e:
                    self.log.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞ {i + 1}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            if not all_media_links:
                self.log.emit("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
                if 'completed_posts' not in progress_data:
                    progress_data['completed_posts'] = []
                progress_data['completed_posts'].extend(processed_posts)
                save_download_progress(save_dir, progress_data)
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                max_workers = self.settings.get('threads_count', 5)
                self.log.emit(f"üöÄ –®–∞–≥ 2: –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ {len(all_media_links)} —Ñ–∞–π–ª–æ–≤ –≤ {max_workers} –ø–æ—Ç–æ–∫–æ–≤!")
                
                # –ú–ê–°–°–û–í–û–ï –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –í–°–ï–• —Ñ–∞–π–ª–æ–≤
                downloaded_count = download_files_parallel(
                    all_media_links, 
                    save_dir, 
                    progress_data, 
                    max_workers=max_workers,
                    thread_callback=self.thread_progress.emit,
                    overall_callback=self.overall_progress.emit,
                    stop_check=lambda: not self.running
                )
                
                total_downloaded += downloaded_count
                
                # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
                if 'completed_posts' not in progress_data:
                    progress_data['completed_posts'] = []
                progress_data['completed_posts'].extend(processed_posts)
                save_download_progress(save_dir, progress_data)
                
                self.log.emit(f"‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {downloaded_count} —Ñ–∞–π–ª–æ–≤")
                
                # –ù–û–í–û–ï: –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–∞—á–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ–±—ã—á–Ω—ã—Ö
                if self.running:
                    self.log.emit("üåê –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–ª–∞—á–Ω—ã–µ —Ñ–∞–π–ª—ã...")
                    cloud_links_file = os.path.join(save_dir, "cloud_links.txt")
                    if os.path.exists(cloud_links_file):
                        try:
                            # –ß–∏—Ç–∞–µ–º –æ–±–ª–∞—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
                            with open(cloud_links_file, 'r', encoding='utf-8') as f:
                                content = f.read()
                            
                            # –ü–∞—Ä—Å–∏–º –æ–±–ª–∞—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                            from downloader_static import detect_cloud_links
                            cloud_links = detect_cloud_links(content)
                            
                            if cloud_links:
                                self.log.emit(f"‚òÅÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(cloud_links)} –æ–±–ª–∞—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                                
                                # –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–∞—á–Ω—ã–µ —Ñ–∞–π–ª—ã
                                from downloader_static import download_cloud_files
                                cloud_downloaded = download_cloud_files(save_dir, cloud_links, "batch_download")
                                
                                if cloud_downloaded:
                                    self.log.emit(f"‚úÖ –û–±–ª–∞—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–∫–∞—á–∞–Ω–æ: {len(cloud_downloaded)}")
                                    total_downloaded += len(cloud_downloaded)
                                else:
                                    self.log.emit("‚ö†Ô∏è –û–±–ª–∞—á–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —Å–∫–∞—á–∞–ª–∏—Å—å")
                            else:
                                self.log.emit("‚ÑπÔ∏è –û–±–ª–∞—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        except Exception as e:
                            self.log.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–ª–∞—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
            
            if self.running:
                self.log.emit(f"\nüéâ –ó–ê–í–ï–†–®–ï–ù–û! –°–∫–∞—á–∞–Ω–æ {total_downloaded} —Ñ–∞–π–ª–æ–≤")
                self.log.emit(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –≤: {save_dir}")
            else:
                self.log.emit(f"\n‚èπÔ∏è –û–°–¢–ê–ù–û–í–õ–ï–ù–û. –°–∫–∞—á–∞–Ω–æ {total_downloaded} —Ñ–∞–π–ª–æ–≤")
            
            self.finished.emit(total_downloaded)
            
        except Exception as e:
            self.log.emit(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.finished.emit(0)

class KemonoDownloaderGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.worker = None
        self.settings = QSettings("KemonoDownloader", "GUI")
        self.init_ui()
        self.load_settings()
        
    def init_ui(self):
        self.setWindowTitle("KemonoDownloader v2.8.2")
        self.setGeometry(100, 100, 700, 580)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        layout.setSpacing(8)
        layout.setContentsMargins(12, 12, 12, 12)
        
        # URL –≤–≤–æ–¥
        url_group = QGroupBox("URL –∞–≤—Ç–æ—Ä–∞")
        url_layout = QVBoxLayout(url_group)
        url_layout.setContentsMargins(8, 16, 8, 8)
        url_layout.setSpacing(4)
        
        self.url_input = QLineEdit()
        self.url_input.setPlaceholderText("https://kemono.cr/patreon/user/12345678")
        self.url_input.setFixedHeight(32)
        url_layout.addWidget(self.url_input)
        
        layout.addWidget(url_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_layout = QGridLayout(settings_group)
        settings_layout.setContentsMargins(8, 16, 8, 8)
        settings_layout.setHorizontalSpacing(8)
        settings_layout.setVerticalSpacing(6)
        
        # --- –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ ---
        folder_label = QLabel("–ü–∞–ø–∫–∞:")
        folder_label.setMinimumWidth(50)
        settings_layout.addWidget(folder_label, 0, 0)

        self.download_dir_input = QLineEdit()
        self.download_dir_input.setText(os.path.join(os.getcwd(), "downloads"))
        self.download_dir_input.setMinimumHeight(32)
        self.download_dir_input.setMinimumWidth(350)
        self.download_dir_input.setStyleSheet("QLineEdit { font-size: 12px; padding-left: 10px; padding-right: 10px; }")
        settings_layout.addWidget(self.download_dir_input, 0, 1)

        self.browse_btn = QPushButton("–û–±–∑–æ—Ä")
        self.browse_btn.setMinimumHeight(32)
        self.browse_btn.setMinimumWidth(70)
        self.browse_btn.setStyleSheet("QPushButton { font-size: 12px; padding: 0 12px; }")
        self.browse_btn.clicked.connect(self.browse_directory)
        settings_layout.addWidget(self.browse_btn, 0, 2)
        
        # –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤
        settings_layout.addWidget(QLabel("–õ–∏–º–∏—Ç:"), 1, 0)
        self.post_limit_input = QSpinBox()
        self.post_limit_input.setRange(0, 10000)
        self.post_limit_input.setValue(0)
        self.post_limit_input.setSpecialValueText("–í—Å–µ")
        self.post_limit_input.setFixedHeight(28)
        self.post_limit_input.valueChanged.connect(self.save_settings)
        settings_layout.addWidget(self.post_limit_input, 1, 1)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        settings_layout.addWidget(QLabel("–ü–æ—Ç–æ–∫–∏:"), 2, 0)
        self.threads_count_input = QSpinBox()
        self.threads_count_input.setRange(1, 10)
        self.threads_count_input.setValue(5)
        self.threads_count_input.setFixedHeight(28)
        self.threads_count_input.valueChanged.connect(self.update_thread_bars)
        self.threads_count_input.valueChanged.connect(self.save_settings)
        settings_layout.addWidget(self.threads_count_input, 2, 1)
        
        # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        settings_layout.addWidget(QLabel("–¢–µ–º–∞:"), 3, 0)
        self.dark_theme_checkbox = QCheckBox("–¢–µ–º–Ω–∞—è")
        self.dark_theme_checkbox.setChecked(True)
        self.dark_theme_checkbox.stateChanged.connect(self.toggle_theme)
        settings_layout.addWidget(self.dark_theme_checkbox, 3, 1)
        
        layout.addWidget(settings_group)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(6)
        
        self.start_btn = QPushButton("–°–∫–∞—á–∞—Ç—å")
        self.start_btn.clicked.connect(self.start_download)
        self.start_btn.setProperty("class", "success")
        self.start_btn.setFixedHeight(32)
        buttons_layout.addWidget(self.start_btn)
        
        self.stop_btn = QPushButton("–°—Ç–æ–ø")
        self.stop_btn.clicked.connect(self.stop_download)
        self.stop_btn.setEnabled(False)
        self.stop_btn.setProperty("class", "danger")
        self.stop_btn.setFixedHeight(32)
        buttons_layout.addWidget(self.stop_btn)
        
        self.open_folder_btn = QPushButton("–ü–∞–ø–∫–∞")
        self.open_folder_btn.clicked.connect(self.open_download_folder)
        self.open_folder_btn.setProperty("class", "primary")
        self.open_folder_btn.setFixedHeight(32)
        buttons_layout.addWidget(self.open_folder_btn)
        
        self.status_btn = QPushButton("–°—Ç–∞—Ç—É—Å")
        self.status_btn.clicked.connect(self.show_download_status)
        self.status_btn.setProperty("class", "info")
        self.status_btn.setFixedHeight(32)
        buttons_layout.addWidget(self.status_btn)
        
        self.formats_btn = QPushButton("–§–æ—Ä–º–∞—Ç—ã")
        self.formats_btn.clicked.connect(self.show_supported_formats)
        self.formats_btn.setProperty("class", "primary")
        self.formats_btn.setFixedHeight(32)
        buttons_layout.addWidget(self.formats_btn)
        
        layout.addLayout(buttons_layout)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_group = QGroupBox("–ü—Ä–æ–≥—Ä–µ—Å—Å")
        progress_main_layout = QVBoxLayout(progress_group)
        progress_main_layout.setContentsMargins(8, 16, 8, 8)
        progress_main_layout.setSpacing(4)
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞
        progress_horizontal = QHBoxLayout()
        progress_horizontal.setSpacing(12)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
        main_progress_container = QWidget()
        main_progress_layout = QVBoxLayout(main_progress_container)
        main_progress_layout.setContentsMargins(0, 0, 0, 0)
        main_progress_layout.setSpacing(4)
        
        # –§–∞–π–ª—ã
        self.overall_progress_label = QLabel("–§–∞–π–ª—ã: 0/0")
        main_progress_layout.addWidget(self.overall_progress_label)
        
        self.overall_progress = QProgressBar()
        self.overall_progress.setFixedHeight(18)
        main_progress_layout.addWidget(self.overall_progress)
        
        # –ü–æ—Å—Ç—ã
        self.post_progress_label = QLabel("–ü–æ—Å—Ç—ã: 0/0") 
        main_progress_layout.addWidget(self.post_progress_label)
        
        self.post_progress = QProgressBar()
        self.post_progress.setFixedHeight(18)
        main_progress_layout.addWidget(self.post_progress)
        
        progress_horizontal.addWidget(main_progress_container)
        
        # –ü–æ—Ç–æ–∫–∏
        threads_container = QWidget()
        threads_layout = QVBoxLayout(threads_container)
        threads_layout.setContentsMargins(0, 0, 0, 0)
        threads_layout.setSpacing(2)
        
        threads_label = QLabel("–ü–æ—Ç–æ–∫–∏:")
        threads_label.setFixedHeight(14)
        threads_layout.addWidget(threads_label)
        
        self.threads_bars_container = QWidget()
        self.threads_bars_layout = QHBoxLayout(self.threads_bars_container)
        self.threads_bars_layout.setContentsMargins(0, 0, 0, 0)
        self.threads_bars_layout.setSpacing(3)
        
        self.thread_progress_bars = []
        self.thread_labels = []
        
        self.create_thread_bars(5)
        
        threads_layout.addWidget(self.threads_bars_container)
        progress_horizontal.addWidget(threads_container)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        progress_main_layout.addLayout(progress_horizontal)
        
        layout.addWidget(progress_group)
        
        # –õ–æ–≥
        log_group = QGroupBox("–õ–æ–≥")
        log_layout = QVBoxLayout(log_group)
        log_layout.setContentsMargins(8, 16, 8, 8)
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setFixedHeight(120)
        log_layout.addWidget(self.log_text)
        
        layout.addWidget(log_group)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.statusBar().showMessage("–ì–æ—Ç–æ–≤")
    
    def create_thread_bars(self, count):
        """–°–æ–∑–¥–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤ –ø–æ—Ç–æ–∫–æ–≤"""
        self.clear_thread_bars()
        
        for i in range(count):
            thread_progress = QProgressBar()
            thread_progress.setOrientation(Qt.Orientation.Vertical)
            thread_progress.setFixedWidth(8)
            thread_progress.setFixedHeight(44)
            thread_progress.setTextVisible(False)
            thread_progress.setValue(0)
            thread_progress.setMaximum(100)
            self.thread_progress_bars.append(thread_progress)
            
            thread_label = QLabel("–û–∂–∏–¥–∞–Ω–∏–µ...")
            thread_label.setVisible(False)
            self.thread_labels.append(thread_label)
            
            self.threads_bars_layout.addWidget(thread_progress)
    
    def clear_thread_bars(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –ø–æ—Ç–æ–∫–æ–≤"""
        # –£–¥–∞–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –∏–∑ layout –∏ –ø–∞–º—è—Ç–∏
        for progress_bar in self.thread_progress_bars:
            self.threads_bars_layout.removeWidget(progress_bar)
            progress_bar.deleteLater()
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏
        self.thread_progress_bars.clear()
        self.thread_labels.clear()
    
    def update_thread_bars(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤ –ø–æ—Ç–æ–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        new_count = self.threads_count_input.value()
        self.create_thread_bars(new_count)

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.download_dir_input.setText(
            self.settings.value("download_dir", os.path.join(os.getcwd(), "downloads"))
        )
        self.post_limit_input.setValue(
            int(self.settings.value("post_limit", 0))
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        threads_count = int(self.settings.value("threads_count", 5))
        self.threads_count_input.setValue(threads_count)
        self.create_thread_bars(threads_count)  # –°–æ–∑–¥–∞–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–æ–≤
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–µ–º—ã
        dark_theme = self.settings.value("dark_theme", True, type=bool)
        self.dark_theme_checkbox.setChecked(dark_theme)
        self.apply_theme(dark_theme)
        
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.settings.setValue("download_dir", self.download_dir_input.text())
        self.settings.setValue("post_limit", self.post_limit_input.value())
        self.settings.setValue("threads_count", self.threads_count_input.value())
        self.settings.setValue("dark_theme", self.dark_theme_checkbox.isChecked())
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞"""
        self.save_settings()
        if self.worker and self.worker.isRunning():
            reply = QMessageBox.question(
                self, 
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –≤—ã–π—Ç–∏?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No
            )
            if reply == QMessageBox.StandardButton.Yes:
                if self.worker:
                    self.worker.stop()
                    self.worker.wait()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()
    
    def browse_directory(self):
        directory = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫")
        if directory:
            self.download_dir_input.setText(directory)
            self.save_settings()
    
    def toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–º—É"""
        dark_theme = self.dark_theme_checkbox.isChecked()
        self.apply_theme(dark_theme)
        self.save_settings()
    
    def apply_theme(self, dark_theme=True):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É"""
        if dark_theme:
            self.apply_dark_theme()
        else:
            self.apply_light_theme()
    
    def apply_dark_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º–Ω—É—é —Ç–µ–º—É"""
        QApplication.instance().setStyleSheet(self.get_dark_theme_style())
    
    def apply_light_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É"""
        QApplication.instance().setStyleSheet(self.get_light_theme_style())
    
    def get_dark_theme_style(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –¥–ª—è —Ç–µ–º–Ω–æ–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ç–µ–º—ã"""
        return """
        /* –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ - –æ—Å–≤–µ—Ç–ª–µ–Ω–Ω–∞—è */
        QMainWindow {
            background-color: #2d2d2d;
            color: #ffffff;
        }
        
        QWidget {
            background-color: #2d2d2d;
            color: #ffffff;
        }
        
        /* –ì—Ä—É–ø–ø—ã - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å –±–µ–∑ —Ñ–æ–Ω–∞ */
        QGroupBox {
            font-weight: 500;
            color: #ffffff;
            border: 1px solid #404040;
            border-radius: 4px;
            margin-top: 12px;
            padding-top: 16px;
            padding-bottom: 8px;
            background-color: transparent;
            font-size: 11px;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 8px;
            padding: 2px 6px 2px 6px;
            color: #ffffff;
            background-color: #2d2d2d;
        }
        
        /* –ü–æ–ª—è –≤–≤–æ–¥–∞ */
        QLineEdit {
            background-color: #404040;
            border: 2px solid #555555;
            border-radius: 6px;
            padding: 8px;
            color: #ffffff;
            font-size: 10pt;
        }
        QLineEdit:focus {
            border-color: #4fc3f7;
            background-color: #4a4a4a;
        }
        
        /* SpinBox - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã */
        QSpinBox, QDoubleSpinBox {
            border: 1px solid #555;
            border-radius: 8px;
            background-color: #2a2a2a;
            color: white;
            padding: 5px;
            font-size: 12px;
        }
        QSpinBox:focus, QDoubleSpinBox:focus {
            border-color: #4fc3f7;
            background-color: #3a3a3a;
        }
        QSpinBox::up-button, QSpinBox::down-button,
        QDoubleSpinBox::up-button, QDoubleSpinBox::down-button {
            border: none;
            background-color: #444;
            width: 16px;
            border-radius: 4px;
        }
        QSpinBox::up-button:hover, QSpinBox::down-button:hover,
        QDoubleSpinBox::up-button:hover, QDoubleSpinBox::down-button:hover {
            background-color: #555;
        }
        QSpinBox::up-arrow, QDoubleSpinBox::up-arrow {
            image: none;
            border-left: 4px solid transparent;
            border-right: 4px solid transparent;
            border-bottom: 4px solid #00aaff;
            width: 0px;
            height: 0px;
        }
        QSpinBox::down-arrow, QDoubleSpinBox::down-arrow {
            image: none;
            border-left: 4px solid transparent;
            border-right: 4px solid transparent;
            border-top: 4px solid #00aaff;
            width: 0px;
            height: 0px;
        }
        
        /* –ß–µ–∫–±–æ–∫—Å—ã */
        QCheckBox {
            color: #ffffff;
            font-size: 10pt;
        }
        QCheckBox::indicator {
            width: 18px;
            height: 18px;
        }
        QCheckBox::indicator:unchecked {
            background-color: #404040;
            border: 2px solid #555555;
            border-radius: 3px;
        }
        QCheckBox::indicator:checked {
            background-color: #4fc3f7;
            border: 2px solid #4fc3f7;
            border-radius: 3px;
        }
        
        /* –ö–Ω–æ–ø–∫–∏ */
        QPushButton {
            background-color: #404040;
            border: 2px solid #666666;
            border-radius: 6px;
            padding: 8px 15px;
            color: #ffffff;
            font-weight: bold;
            font-size: 10pt;
        }
        QPushButton:hover {
            background-color: #505050;
            border-color: #777777;
        }
        QPushButton:pressed {
            background-color: #353535;
        }
        QPushButton:disabled {
            background-color: #2a2a2a;
            color: #666666;
            border-color: #444444;
        }
        
        /* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ */
        QProgressBar {
            border: 1px solid #505050;
            border-radius: 1px;
            background-color: #3a3a3a;
            text-align: center;
            color: #ffffff;
            font-size: 9px;
        }
        QProgressBar::chunk {
            background-color: #0078d4;
            border-radius: 0px;
        }
        
        /* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å –ª–µ–≥–∫–∏–º —Ñ–æ–Ω–æ–º */
        QTextEdit {
            background-color: rgba(255, 255, 255, 0.03);
            border: 1px solid #404040;
            border-radius: 2px;
            color: #ffffff;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 10px;
            padding: 8px;
            margin: 2px;
            line-height: 1.3;
        }
        
        /* Labels - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ */
        QLabel {
            color: #ffffff;
            font-size: 10px;
        }
        
        /* –°—Ç–∞—Ç—É—Å –±–∞—Ä - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π */
        QStatusBar {
            background-color: #3a3a3a;
            color: #ffffff;
            border-top: 1px solid #404040;
            font-size: 9px;
        }
        
        /* –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ */
        QScrollBar:vertical {
            background-color: #2a2a2a;
            width: 10px;
            border-radius: 0px;
        }
        QScrollBar::handle:vertical {
            background-color: #505050;
            border-radius: 0px;
            min-height: 20px;
        }
        QScrollBar::handle:vertical:hover {
            background-color: #606060;
        }
        
        /* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ */
        QPushButton[class="success"] {
            background-color: #107c10;
            border-color: #107c10;
        }
        QPushButton[class="success"]:hover {
            background-color: #0e6e0e;
        }
        
        QPushButton[class="danger"] {
            background-color: #d13438;
            border-color: #d13438;
        }
        QPushButton[class="danger"]:hover {
            background-color: #b92b2b;
        }
        
        QPushButton[class="primary"] {
            background-color: #0078d4;
            border-color: #0078d4;
        }
        QPushButton[class="primary"]:hover {
            background-color: #106ebe;
        }
        
        QPushButton[class="info"] {
            background-color: #0078d4;
            border-color: #0078d4;
        }
        QPushButton[class="info"]:hover {
            background-color: #106ebe;
        }
        """
    
    def get_light_theme_style(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSS –¥–ª—è —Å–≤–µ—Ç–ª–æ–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ç–µ–º—ã"""
        return """
        /* –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ */
        QMainWindow {
            background-color: #fafafa;
            color: #000000;
        }
        
        QWidget {
            background-color: #fafafa;
            color: #000000;
        }
        
        /* –ì—Ä—É–ø–ø—ã - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å –±–µ–∑ —Ñ–æ–Ω–∞ */
        QGroupBox {
            font-weight: 500;
            color: #000000;
            border: 1px solid #d0d0d0;
            border-radius: 4px;
            margin-top: 12px;
            padding-top: 16px;
            padding-bottom: 8px;
            background-color: transparent;
            font-size: 11px;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 8px;
            padding: 2px 6px 2px 6px;
            color: #000000;
            background-color: #fafafa;
        }
        
        /* –ü–æ–ª—è –≤–≤–æ–¥–∞ - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å –ª–µ–≥–∫–∏–º —Ñ–æ–Ω–æ–º */
        QLineEdit {
            background-color: rgba(0, 0, 0, 0.02);
            border: 1px solid #d0d0d0;
            border-radius: 2px;
            padding: 10px 12px;
            margin: 2px;
            color: #000000;
            font-size: 11px;
            min-height: 16px;
        }
        QLineEdit:focus {
            border-color: #0078d4;
            background-color: rgba(0, 0, 0, 0.04);
        }
        
        /* SpinBox - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å–≤–µ—Ç–ª—ã–π —Å—Ç–∏–ª—å */
        QSpinBox, QDoubleSpinBox {
            border: 1px solid #d0d0d0;
            border-radius: 2px;
            background-color: #ffffff;
            color: black;
            padding: 4px 6px;
            font-size: 10px;
        }
        QSpinBox:focus, QDoubleSpinBox:focus {
            border-color: #0078d4;
            background-color: #ffffff;
        }
        QSpinBox::up-button, QSpinBox::down-button,
        QDoubleSpinBox::up-button, QDoubleSpinBox::down-button {
            border: none;
            background-color: #e8e8e8;
            width: 14px;
            border-radius: 1px;
        }
        QSpinBox::up-button:hover, QSpinBox::down-button:hover,
        QDoubleSpinBox::up-button:hover, QDoubleSpinBox::down-button:hover {
            background-color: #d8d8d8;
        }
        QSpinBox::up-arrow, QDoubleSpinBox::up-arrow {
            image: none;
            border-left: 3px solid transparent;
            border-right: 3px solid transparent;
            border-bottom: 3px solid #000000;
            width: 0px;
            height: 0px;
        }
        QSpinBox::down-arrow, QDoubleSpinBox::down-arrow {
            image: none;
            border-left: 3px solid transparent;
            border-right: 3px solid transparent;
            border-top: 3px solid #000000;
            width: 0px;
            height: 0px;
        }
        
        /* –ß–µ–∫–±–æ–∫—Å—ã - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ */
        QCheckBox {
            color: #000000;
            font-size: 10px;
        }
        QCheckBox::indicator {
            width: 16px;
            height: 16px;
        }
        QCheckBox::indicator:unchecked {
            background-color: #ffffff;
            border: 1px solid #d0d0d0;
            border-radius: 2px;
        }
        QCheckBox::indicator:checked {
            background-color: #0078d4;
            border: 1px solid #0078d4;
            border-radius: 2px;
        }
        
        /* –ö–Ω–æ–ø–∫–∏ - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ */
        QPushButton {
            background-color: #ffffff;
            border: 1px solid #d0d0d0;
            border-radius: 2px;
            padding: 6px 12px;
            color: #000000;
            font-weight: 400;
            font-size: 10px;
        }
        QPushButton:hover {
            background-color: #f0f0f0;
            border-color: #c0c0c0;
        }
        QPushButton:pressed {
            background-color: #e8e8e8;
        }
        QPushButton:disabled {
            background-color: #f8f8f8;
            color: #999999;
            border-color: #e0e0e0;
        }
        
        /* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ */
        QProgressBar {
            border: 1px solid #d0d0d0;
            border-radius: 1px;
            background-color: #f8f8f8;
            text-align: center;
            color: #000000;
            font-size: 9px;
        }
        QProgressBar::chunk {
            background-color: #0078d4;
            border-radius: 0px;
        }
        
        /* –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏ - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å –ª–µ–≥–∫–∏–º —Ñ–æ–Ω–æ–º */
        QTextEdit {
            background-color: rgba(0, 0, 0, 0.01);
            border: 1px solid #d0d0d0;
            border-radius: 2px;
            color: #000000;
            font-family: 'Consolas', 'Monaco', monospace;
            font-size: 10px;
            padding: 8px;
            margin: 2px;
            line-height: 1.3;
        }
        
        /* Labels - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ */
        QLabel {
            color: #000000;
            font-size: 10px;
        }
        
        /* –°—Ç–∞—Ç—É—Å –±–∞—Ä - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π */
        QStatusBar {
            background-color: #f0f0f0;
            color: #000000;
            border-top: 1px solid #d0d0d0;
            font-size: 9px;
        }
        
        /* –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ */
        QScrollBar:vertical {
            background-color: #f8f8f8;
            width: 10px;
            border-radius: 0px;
        }
        QScrollBar::handle:vertical {
            background-color: #c0c0c0;
            border-radius: 0px;
            min-height: 20px;
        }
        QScrollBar::handle:vertical:hover {
            background-color: #a0a0a0;
        }
        
        /* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ - –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ */
        QPushButton[class="success"] {
            background-color: #107c10;
            border-color: #107c10;
            color: #ffffff;
        }
        QPushButton[class="success"]:hover {
            background-color: #0e6e0e;
        }
        
        QPushButton[class="danger"] {
            background-color: #d13438;
            border-color: #d13438;
            color: #ffffff;
        }
        QPushButton[class="danger"]:hover {
            background-color: #b92b2b;
        }
        
        QPushButton[class="primary"] {
            background-color: #0078d4;
            border-color: #0078d4;
            color: #ffffff;
        }
        QPushButton[class="primary"]:hover {
            background-color: #106ebe;
        }
        
        QPushButton[class="info"] {
            background-color: #0078d4;
            border-color: #0078d4;
            color: #ffffff;
        }
        QPushButton[class="info"]:hover {
            background-color: #106ebe;
        }
        """
    
    def open_download_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å –∑–∞–≥—Ä—É–∑–∫–∞–º–∏"""
        download_dir = self.download_dir_input.text()
        if os.path.exists(download_dir):
            import subprocess
            import platform
            
            if platform.system() == "Windows":
                os.startfile(download_dir)
            elif platform.system() == "Darwin":  # macOS
                subprocess.call(["open", download_dir])
            else:  # Linux
                subprocess.call(["xdg-open", download_dir])
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    
    def show_download_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ"""
        download_dir = self.download_dir_input.text()
        
        if not os.path.exists(download_dir):
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –ò—â–µ–º –≤—Å–µ –ø–æ–¥–ø–∞–ø–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        status_info = []
        
        for root, dirs, files in os.walk(download_dir):
            if '.kemono_progress.json' in files:
                try:
                    progress_file = os.path.join(root, '.kemono_progress.json')
                    with open(progress_file, 'r', encoding='utf-8') as f:
                        progress_data = json.load(f)
                    
                    relative_path = os.path.relpath(root, download_dir)
                    completed_posts = len(progress_data.get('completed_posts', []))
                    completed_files = len(progress_data.get('completed_files', {}))
                    started_at = progress_data.get('started_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    total_size = 0
                    for file_info in progress_data.get('completed_files', {}).values():
                        total_size += file_info.get('size', 0)
                    
                    size_mb = total_size / (1024 * 1024)
                    
                    status_info.append({
                        'path': relative_path,
                        'posts': completed_posts,
                        'files': completed_files,
                        'size_mb': size_mb,
                        'started': started_at[:19] if started_at != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' else started_at
                    })
                except Exception as e:
                    continue
        
        if not status_info:
            QMessageBox.information(self, "–°—Ç–∞—Ç—É—Å", "–í –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        message = "üìä –°–¢–ê–¢–£–° –ó–ê–ì–†–£–ó–û–ö\n" + "="*50 + "\n\n"
        
        for info in status_info:
            message += f"üìÅ {info['path']}\n"
            message += f"   üìÑ –ü–æ—Å—Ç–æ–≤: {info['posts']}\n"
            message += f"   üìÅ –§–∞–π–ª–æ–≤: {info['files']}\n"
            message += f"   üíæ –†–∞–∑–º–µ—Ä: {info['size_mb']:.1f} MB\n"
            message += f"   üìÖ –ù–∞—á–∞—Ç–æ: {info['started']}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–∏–∞–ª–æ–≥–µ
        msg_box = QMessageBox(self)
        msg_box.setWindowTitle("üìä –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–æ–∫")
        msg_box.setText(message)
        msg_box.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg_box.exec()
    
    def show_supported_formats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤"""
        message = """üéØ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –í–°–ï–• –§–ê–ô–õ–û–í
        
üé≠ 3D –ú–û–î–ï–õ–ò –ò BLENDER:
‚Ä¢ GLB, GLTF - 3D –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–µ–± –∏ –∏–≥—Ä
‚Ä¢ BLEND - —Ñ–∞–π–ª—ã Blender
‚Ä¢ FBX, OBJ, DAE - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ 3D —Ñ–æ—Ä–º–∞—Ç—ã
‚Ä¢ 3DS, MAX, MA, MB - —Ñ–æ—Ä–º–∞—Ç—ã 3D –ø–∞–∫–µ—Ç–æ–≤

üé¨ –í–ò–î–ï–û:
‚Ä¢ MP4, MOV, AVI, MKV, WEBM
‚Ä¢ FLV, WMV, M4V, MPG, MPEG

üñºÔ∏è –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø:
‚Ä¢ PNG, JPG, JPEG, GIF, BMP
‚Ä¢ TIFF, TGA, PSD, WEBP, SVG

üì¶ –ê–†–•–ò–í–´:
‚Ä¢ ZIP, RAR, 7Z, TAR, GZ, BZ2, XZ

üìÑ –î–û–ö–£–ú–ï–ù–¢–´:
‚Ä¢ PDF, DOC, DOCX, TXT, RTF

üéµ –ê–£–î–ò–û:
‚Ä¢ MP3, WAV, FLAC, OGG, M4A, AAC

üéÆ UNITY –ò –ò–ì–†–´:
‚Ä¢ UNITY, UNITYPACKAGE, PREFAB, ASSET

üé® –¢–ï–ö–°–¢–£–†–´ –ò –ú–ê–¢–ï–†–ò–ê–õ–´:
‚Ä¢ DDS, HDR, EXR, MAT

üì± –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:
‚Ä¢ EXE, MSI, DMG, APK, IPA

‚òÅÔ∏è –û–ë–õ–ê–ß–ù–´–ï –°–°–´–õ–ö–ò:
‚Ä¢ Google Drive, MEGA, Dropbox
‚Ä¢ OneDrive, MediaFire, WeTransfer
‚Ä¢ pCloud, Yandex Disk, Box, iCloud
‚Ä¢ –°—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ cloud_links.txt

‚ú® –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –í–°–ï —Ñ–∞–π–ª—ã –∏ —Å—Å—ã–ª–∫–∏ –≤ –ø–æ—Å—Ç–∞—Ö!"""
        
        msg_box = QMessageBox(self)
        msg_box.setWindowTitle("üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤")
        msg_box.setText(message)
        msg_box.setStandardButtons(QMessageBox.StandardButton.Ok)
        msg_box.exec()
    
    def start_download(self):
        url = self.url_input.text().strip()
        if not url:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ URL –∞–≤—Ç–æ—Ä–∞!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        download_dir = self.download_dir_input.text()
        os.makedirs(download_dir, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = {
            'download_dir': download_dir,
            'post_limit': self.post_limit_input.value() if self.post_limit_input.value() > 0 else None,
            'threads_count': self.threads_count_input.value()
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫
        self.worker = DownloaderWorker(url, settings)
        self.worker.progress.connect(self.update_post_progress)
        self.worker.log.connect(self.add_log)
        self.worker.finished.connect(self.download_finished)
        self.worker.thread_progress.connect(self.update_thread_progress)
        self.worker.overall_progress.connect(self.update_overall_progress)
        
        self.worker.start()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.statusBar().showMessage("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        self.log_text.clear()
        
    def stop_download(self):
        if self.worker:
            self.worker.stop()
            self.add_log("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
            
    def update_post_progress(self, current, total):
        self.post_progress.setMaximum(total)
        self.post_progress.setValue(current)
        self.post_progress_label.setText(f"–ü–æ—Å—Ç—ã: {current} / {total}")
    
    def update_thread_progress(self, thread_id, filename, progress, max_progress):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (—Å—Ç–æ–ª–±–∏–∫–∏ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã)"""
        if 0 <= thread_id < len(self.thread_progress_bars):            
            if max_progress > 0:
                self.thread_progress_bars[thread_id].setMaximum(max_progress)
                self.thread_progress_bars[thread_id].setValue(progress)
            else:
                self.thread_progress_bars[thread_id].setMaximum(1)
                self.thread_progress_bars[thread_id].setValue(1)
            
            # Tooltip —Å –Ω–æ–º–µ—Ä–æ–º –ø–æ—Ç–æ–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
            short_filename = filename[:25] + "..." if len(filename) > 25 else filename
            tooltip_text = f"–ü–æ—Ç–æ–∫ #{thread_id+1}\n{filename}\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%"
            self.thread_progress_bars[thread_id].setToolTip(tooltip_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–π label –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
            self.thread_labels[thread_id].setText(short_filename)
    
    def update_overall_progress(self, current, total):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        if total > 0:
            self.overall_progress.setMaximum(total)
            self.overall_progress.setValue(current)
        else:
            self.overall_progress.setMaximum(1)
            self.overall_progress.setValue(1)
        
        self.overall_progress_label.setText(f"–§–∞–π–ª—ã: {current} / {total}")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ 100% –µ—Å–ª–∏ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–∫–∞—á–∞–Ω—ã
        if current >= total and total > 0:
            self.overall_progress.setValue(total)  # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 100%

    def add_log(self, message):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å—Ç–æ–≤ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        show_keywords = [
            '–æ—à–∏–±–∫–∞', 'error', '‚ùå', '‚úÖ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', '‚úÖ', 'üéØ', 'üìã', 'üéâ',
            'üìÑ', '–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å—Ç', 'analyzing post',
            'üì•', '‚¨áÔ∏è', '—Å–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤', '—É–∂–µ —Å–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤', 'files downloaded', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ',
            'üöÄ', '–Ω–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ', '–Ω–∞—á–∏–Ω–∞–µ–º', '—à–∞–≥ 1', '—à–∞–≥ 2', 'üîç'
        ]
        if any(keyword in message.lower() for keyword in show_keywords):
            self.log_text.append(message)
            # –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
            scrollbar = self.log_text.verticalScrollBar()
            scrollbar.setValue(scrollbar.maximum())
        
    def download_finished(self, files_count):
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ 100%
        if self.overall_progress.maximum() > 0:
            self.overall_progress.setValue(self.overall_progress.maximum())
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –ø–æ—Ç–æ–∫–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º—ã–º–∏)
        for i, progress_bar in enumerate(self.thread_progress_bars):
            progress_bar.setValue(0)
            progress_bar.setToolTip("")  # –û—á–∏—â–∞–µ–º tooltip
            self.thread_labels[i].setText("–û–∂–∏–¥–∞–Ω–∏–µ...")
        
        if files_count > 0:
            self.statusBar().showMessage(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –°–∫–∞—á–∞–Ω–æ {files_count} —Ñ–∞–π–ª–æ–≤")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É
            reply = QMessageBox.question(
                self, 
                "–£—Å–ø–µ—Ö", 
                f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_count}\n\n–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.Yes
            )
            if reply == QMessageBox.StandardButton.Yes:
                self.open_download_folder()
        else:
            self.statusBar().showMessage("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        self.worker = None

def main():
    app = QApplication(sys.argv)
    app.setApplicationName("KemonoDownloader GUI v2.8.2 Progress")
    
    # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ (—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –≤ load_settings)
    window = KemonoDownloaderGUI()
    window.show()
    
    sys.exit(app.exec())

if __name__ == "__main__":
    main()