#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ü¶ä KemonoDownloader v2.6 Cloud Auto - Cloud Files Downloader
===========================================================
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –æ–±–ª–∞—á–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
"""

import re
import requests
import os
from urllib.parse import urlparse, parse_qs
import time
import json

class CloudDownloader:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36'
        })
        
    def download_from_cloud(self, url, save_dir, filename_hint=None):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        """
        print(f"üåê –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–ª–∞—á–Ω—É—é —Å—Å—ã–ª–∫—É: {url[:80]}...")
        
        if 'drive.google.com' in url:
            return self._download_google_drive(url, save_dir, filename_hint)
        elif 'dropbox.com' in url:
            return self._download_dropbox(url, save_dir, filename_hint)
        elif 'mediafire.com' in url:
            return self._download_mediafire(url, save_dir, filename_hint)
        elif 'mega.nz' in url or 'mega.co.nz' in url:
            return self._download_mega(url, save_dir, filename_hint)
        else:
            print(f"‚ùå –ê–≤—Ç–æ—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return False
    
    def _download_google_drive(self, url, save_dir, filename_hint=None):
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å Google Drive
        """
        print("üìÅ Google Drive: –ø–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º file_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫
        file_id = None
        
        # –§–æ—Ä–º–∞—Ç: https://drive.google.com/file/d/FILE_ID/view?usp=sharing
        match = re.search(r'/file/d/([a-zA-Z0-9_-]+)', url)
        if match:
            file_id = match.group(1)
        
        # –§–æ—Ä–º–∞—Ç: https://drive.google.com/open?id=FILE_ID
        if not file_id:
            parsed = urlparse(url)
            query_params = parse_qs(parsed.query)
            if 'id' in query_params:
                file_id = query_params['id'][0]
        
        if not file_id:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å file_id –∏–∑ —Å—Å—ã–ª–∫–∏ Google Drive")
            return False
        
        print(f"üîë File ID: {file_id}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        info_url = f"https://drive.google.com/file/d/{file_id}/view"
        try:
            response = self.session.get(info_url)
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.status_code}")
                return False
            
            # –ò—â–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ HTML
            filename = filename_hint or f"gdrive_file_{file_id}"
            title_match = re.search(r'<title>([^<]+)</title>', response.text)
            if title_match:
                title = title_match.group(1).strip()
                if title and title != "Google Drive":
                    filename = title.replace(' - Google Drive', '')
                    # –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
            
            print(f"üìÑ –ò–º—è —Ñ–∞–π–ª–∞: {filename}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            filename = filename_hint or f"gdrive_file_{file_id}"
        
        # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_url = f"https://drive.google.com/uc?export=download&id={file_id}"
        
        return self._download_file(download_url, save_dir, filename, handle_redirects=True)
    
    def _download_dropbox(self, url, save_dir, filename_hint=None):
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å Dropbox
        """
        print("üì¶ Dropbox: –ø–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É...")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ã—á–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –ø—Ä—è–º—É—é
        if '?dl=0' in url:
            direct_url = url.replace('?dl=0', '?dl=1')
        elif '?dl=1' not in url:
            direct_url = url + '?dl=1'
        else:
            direct_url = url
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
        filename = filename_hint
        if not filename:
            path_parts = urlparse(url).path.split('/')
            for part in reversed(path_parts):
                if part and '.' in part:
                    filename = part
                    break
            if not filename:
                filename = f"dropbox_file_{int(time.time())}"
        
        print(f"üìÑ –ò–º—è —Ñ–∞–π–ª–∞: {filename}")
        
        return self._download_file(direct_url, save_dir, filename)
    
    def _download_mediafire(self, url, save_dir, filename_hint=None):
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å MediaFire
        """
        print("üî• MediaFire: –ø–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∞–π–ª–∞
            response = self.session.get(url)
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}")
                return False
            
            # –ò—â–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            download_match = re.search(r'href="(https://download\d+\.mediafire\.com/[^"]+)"', response.text)
            if not download_match:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                return False
            
            direct_url = download_match.group(1)
            
            # –ò—â–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = filename_hint
            if not filename:
                filename_match = re.search(r'<div class="filename">([^<]+)</div>', response.text)
                if filename_match:
                    filename = filename_match.group(1).strip()
                else:
                    filename = f"mediafire_file_{int(time.time())}"
            
            print(f"üìÑ –ò–º—è —Ñ–∞–π–ª–∞: {filename}")
            print(f"üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: {direct_url[:80]}...")
            
            return self._download_file(direct_url, save_dir, filename)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MediaFire: {e}")
            return False
    
    def _download_mega(self, url, save_dir, filename_hint=None):
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å MEGA (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        """
        print("üîí MEGA: –ø—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        print("‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ MEGA –Ω—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Çeka mega.py")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install mega.py")
        
        try:
            import mega
            print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ mega.py –Ω–∞–π–¥–µ–Ω–∞!")
            
            # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ mega.py
            m = mega.Mega()
            m = m.login()  # –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤—Ö–æ–¥
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            filename = m.download_url(url, save_dir)
            if filename:
                print(f"‚úÖ MEGA —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω: {filename}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å MEGA")
                return False
                
        except ImportError:
            print("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ mega.py –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install mega.py")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å MEGA: {e}")
            return False
    
    def _download_file(self, url, save_dir, filename, handle_redirects=False):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        """
        try:
            os.makedirs(save_dir, exist_ok=True)
            file_path = os.path.join(save_dir, filename)
            
            print(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º: {filename}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Google Drive —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
            if handle_redirects:
                response = self.session.get(url, stream=True, allow_redirects=False)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ Google Drive (virus scan warning)
                if response.status_code == 302 or 'Location' in response.headers:
                    redirect_url = response.headers.get('Location', url)
                    response = self.session.get(redirect_url, stream=True)
                elif 'virus scan warning' in response.text.lower():
                    # –ò—â–µ–º —Å—Å—ã–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    confirm_match = re.search(r'/uc\?export=download&amp;confirm=([^&]+)&amp;id=([^"]+)', response.text)
                    if confirm_match:
                        confirm_code = confirm_match.group(1)
                        file_id = confirm_match.group(2) 
                        confirm_url = f"https://drive.google.com/uc?export=download&confirm={confirm_code}&id={file_id}"
                        response = self.session.get(confirm_url, stream=True)
                        
            else:
                response = self.session.get(url, stream=True)
            
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: HTTP {response.status_code}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            total_size = int(response.headers.get('Content-Length', 0))
            
            with open(file_path, 'wb') as f:
                downloaded = 0
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        
                        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                        if total_size > 0:
                            progress = (downloaded / total_size) * 100
                            print(f"\rüì• –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% ({downloaded}/{total_size} –±–∞–π—Ç)", end='')
            
            print(f"\n‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {filename} ({downloaded} –±–∞–π—Ç)")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False

def test_cloud_downloader():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞—á–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
    """
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º CloudDownloader")
    print("=" * 50)
    
    downloader = CloudDownloader()
    test_dir = "cloud_test"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    test_urls = [
        # "https://drive.google.com/file/d/YOUR_FILE_ID/view?usp=sharing",
        # "https://www.dropbox.com/s/YOUR_LINK/filename.zip?dl=0",
        # "https://www.mediafire.com/file/YOUR_LINK/filename.zip/file"
    ]
    
    for url in test_urls:
        print(f"\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º: {url}")
        success = downloader.download_from_cloud(url, test_dir)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—Ö' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_cloud_downloader()